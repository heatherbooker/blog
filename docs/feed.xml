<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
	<title>Heather B-Log</title>
	<description>These are the words that I&#39;ve had to say in the past whenever. Go ahead and consume them.</description>
	
	<link href="https://hboo.ca/blog/feed.xml" rel="self"/>
	<link href="https://hboo.ca"/>
	<updated>2020-10-16T00:00:00Z</updated>
	<id>Heather B-Log</id>
	<author>
		<name>heather booker</name>
	</author>
	
	<entry>
		<title>Learning les chiffres en fran√ßais</title>
		<link href="https://hboo.ca/blog/posts/2020-10-16-learning-les-chiffres-en-francais/"/>
		<updated>2020-10-16T00:00:00Z</updated>
		<id>https://hboo.ca/blog/posts/2020-10-16-learning-les-chiffres-en-francais/</id>
		<content type="html">&lt;blockquote&gt;
&lt;p&gt;Oh, Miss hboo:&lt;/p&gt;
&lt;p&gt;Many years I have waited&lt;br /&gt;
For a gift like yours to appear&lt;br /&gt;
Why, I predict this project&lt;br /&gt;
Could make you a first rate! francophone&lt;br /&gt;
My dear, my dear!&lt;br /&gt;
I&#39;ll write at once to blog readers&lt;br /&gt;
Tell them of it in advance&lt;br /&gt;
With a tool like this, dear there is&lt;br /&gt;
A definish chance&lt;br /&gt;
If you work as you should&lt;br /&gt;
You&#39;ll be making ...goooooooooood üòç&lt;/p&gt;
&lt;p&gt;Did that really just happen?&lt;br /&gt;
Have I actually understood?&lt;br /&gt;
This problem I&#39;ve tried&lt;br /&gt;
To ignore or hide&lt;br /&gt;
Is a talent! that can be learned...to&lt;br /&gt;
Help me use French numbers!&lt;br /&gt;
If I work good.&lt;br /&gt;
So I&#39;ll work good...&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;üòÇ&lt;/p&gt;
&lt;p&gt;I definitely ripped that off big time from Wicked the musical. And my changes aren&#39;t particularly clever, which is fine, because the goal here is:&lt;/p&gt;
&lt;p&gt;LEARN YOU SOME NUMBERS IN FRENCH FOR GREAT GOOD.&lt;/p&gt;
&lt;p&gt;And not: &amp;quot;Be good at writing song lyrics.&amp;quot; We can work on that another day maybe. üòÇ&lt;/p&gt;
&lt;p&gt;Anyway, so learning numbers in French is impossibly difficult, at least if you ask me. Which reading my blog is basically asking me, I guess. ¬Ø\&lt;em&gt;(„ÉÑ)&lt;/em&gt;/¬Ø It&#39;s especially difficult because 50 is 50, which is cool, and 60 is 60, which is also cool, but then suddenly 70 is 60-10, and then 80 is: well, what could it be? 60-20? 60-10-10? No, better: 4-20. Ah! Beautiful. Now 90 can follow the 70 pattern, and add 10: 4-20-10. And god forbid you want, for example, 97: 4-20-10-7. -__- Unbelieveable. I know English is impossible too but come on, numbers!! They&#39;re so hard!! And so important!! Who cares if you say &amp;quot;I goed&amp;quot; instead of &amp;quot;I went&amp;quot;. But we will care if you give us $4.20 when we actually wanted $80, thank you very much!!&lt;/p&gt;
&lt;p&gt;Puh. Rant over. So what I really wanted for practicing numbers was just something that would shoot numbers at me again and again, and tell me if I understand them correctly. I found &lt;a href=&quot;https://www.youtube.com/watch?v=3rd_haB5V0c&quot;&gt;a cute lil video series&lt;/a&gt; which was fine for my purposes, except it&#39;s only like 20 numbers, and I need to practice like infinity numbers. Eventually I gave up wanting and wishing, and made something myself!! Which I began working on a week or so ago, and then suddenly received a kick in the butt to finish, in the form of a voicemail message that I had to listen to 15 times to get the phone number I needed to call back. I was getting sweaty just sitting there.&lt;/p&gt;
&lt;p&gt;So &lt;a href=&quot;https://github.com/heatherbooker/pratiquer-chiffres&quot;&gt;here&#39;s what we&#39;ve got&lt;/a&gt;! A cute little python script that uses the &lt;a href=&quot;https://cloud.google.com/text-to-speech&quot;&gt;Google text-to-speech API&lt;/a&gt; to say numbers aloud in French. The normal (online) mode picks a random number, sends it to the Google API, writes the response to disk, plays the newly-saved file, asks you what number it was, and then JUDGES YOU. The current judgement format of &amp;quot;right vs wrong&amp;quot; is great for me, because I&#39;m slow but usually correct, as long as the number:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;doesn&#39;t start with 8000, and&lt;/li&gt;
&lt;li&gt;isn&#39;t longer than 4 digits&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Don&#39;t ask, idk, 8000 always confuses me, I always write 1000 instead.&lt;/p&gt;
&lt;p&gt;It saves the audio to disk because it seems wasteful to ask Google over and over for 44 (or 709, or 0, or..). That also opened up the ability to add a second mode: offline mode! For when my Google free cloud limit is reached, or the internet is being a potato, or whatever. So for offline mode, it just picks a random audio file from the numbers that have been done previously, and hits me with that. Some other little perks of this offline method include being slightly faster, and also not making my fan spin for 0.5 seconds at a time.&lt;/p&gt;
&lt;p&gt;Other interesting things I learned or decided while creating this lil creature:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the french equivalent of &amp;quot;uh oh&amp;quot; is &amp;quot;houl√†&amp;quot;&lt;/li&gt;
&lt;li&gt;python has the best interface for getting simple user input&lt;/li&gt;
&lt;li&gt;i miss javascripts sneaky conversion between strings and integers, i got bit by expecting that a few times, plus:&lt;/li&gt;
&lt;li&gt;i miss typescript telling me that i&#39;m stupidly trying to put a string where an int should be, and vice versa&lt;/li&gt;
&lt;li&gt;i used &lt;code&gt;subprocess.Popen&lt;/code&gt; instead of &lt;code&gt;subprocess.run&lt;/code&gt; for playing the audio, so that for big numbers, i can start typing the answer before it has been fully said üòÇ&lt;/li&gt;
&lt;li&gt;you have to specify you are writing bytes to a file (as opposed to writing a string)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;On the sad side of things, I did not succeed at taking a screen recording of me playing, so I don&#39;t get to show you that. üòû&lt;/p&gt;
&lt;p&gt;On the to-do side of things, I really would like to be able to give the program an answer and then tell it to quit instead of it starting another number. I&#39;m thinking something like&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;what numba?&lt;br /&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;42&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;done&lt;/span&gt;&lt;br /&gt;correct and goodbye&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Because right now it&#39;s like&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;what numba?&lt;br /&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;42&lt;/span&gt;&lt;br /&gt;what numba?&lt;br /&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;done&lt;/span&gt;&lt;br /&gt;correct and goodbye&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And this stresses me out because I feel like I&#39;m leaving it halfway unfinished&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://hboo.ca/blog/posts/2020-10-16-learning-les-chiffres-en-francais/#fn1&quot; id=&quot;fnref1&quot;&gt;[1]&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;Anyway, &lt;a href=&quot;https://github.com/heatherbooker/pratiquer-chiffres&quot;&gt;here&#39;s the code&lt;/a&gt;, have fun, submit issues/improvements, troll, learn, etc. üòÉ √Ä la prochaine !&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;PS. I installed a plugin to convert &lt;code&gt;:+1:&lt;/code&gt; emoji shorthands into actual visible emojis, which is rad. However, I predict it will make the previous post where I explain that I am using shorthands very confusing, since now they will just be actual emojis. You win some you lose some. üòÇ&lt;/p&gt;
&lt;hr /&gt;
&lt;hr class=&quot;footnotes-sep&quot; /&gt;
&lt;section class=&quot;footnotes&quot;&gt;
&lt;ol class=&quot;footnotes-list&quot;&gt;
&lt;li id=&quot;fn1&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;&amp;quot;Halfway unfinished&amp;quot; is a pretty weird thing to say, but I&#39;m kindof into it. &lt;a href=&quot;https://hboo.ca/blog/posts/2020-10-16-learning-les-chiffres-en-francais/#fnref1&quot; class=&quot;footnote-backref&quot;&gt;‚Ü©Ô∏é&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
	</entry>
	
	<entry>
		<title>Random thoughts</title>
		<link href="https://hboo.ca/blog/posts/2020-05-19-random-thoughts/"/>
		<updated>2020-05-19T00:00:00Z</updated>
		<id>https://hboo.ca/blog/posts/2020-05-19-random-thoughts/</id>
		<content type="html">&lt;p&gt;There is a super cool thing a friend of mine did, which I wish to emulate: have an adorable &lt;a href=&quot;https://glit.sh/~wesleyac/thoughts/&quot;&gt;page of random thoughts&lt;/a&gt;. It seems super low pressure, fun as a reader to get a glimpse into someone else&#39;s head, and fun as a creator to just collect a mish-mash of glorious tidbits.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/marenbeam/thoughts&quot;&gt;original implementation&lt;/a&gt; doesn&#39;t involve any manual git-anythings, and makes a nice separate page for these random thoughts. However, I (apparently) am never going to get around to doing that, so a blog post that I update with the thoughts seems good enough. It will be weird, but I am fine with that. üòÑ&lt;/p&gt;
&lt;p&gt;19 May, 2020&lt;/p&gt;
&lt;p&gt;First thought is this hilarious ad on a website for a local music store that I thought was very cute and saved a few weeks ago, for this exact purpose:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://hboo.ca/blog/img/steves.png&quot; alt=&quot;steves music store - wash those hands!&quot; /&gt;&lt;/p&gt;
&lt;p&gt;20 May, 2020&lt;/p&gt;
&lt;p&gt;I think this format will not do; it is going to make me censor myself more, because this feels like a conversational blog post rather than a collection of random thoughts. But we must try anyway.&lt;/p&gt;
&lt;p&gt;20 May, 2020&lt;/p&gt;
&lt;p&gt;I am a parasite to humanity.&lt;/p&gt;
&lt;p&gt;21 May, 2020&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://hboo.ca/blog/thoughts&quot;&gt;I did it!&lt;/a&gt; Bye!&lt;/p&gt;
&lt;p&gt;23 May, 2020&lt;/p&gt;
&lt;p&gt;So! How did I do it? Mostly in &lt;a href=&quot;https://github.com/heatherbooker/blog/commit/60a3504cbddbf12fc16e290ea313b8119a7b4f08&quot;&gt;this commit&lt;/a&gt; (where I have omitted less relevant parts from this post):&lt;/p&gt;
&lt;pre class=&quot;language-git&quot;&gt;&lt;code class=&quot;language-git&quot;&gt;&lt;br /&gt;&lt;span class=&quot;token commit-sha1&quot;&gt;commit 60a3504cbddbf12fc16e290ea313b8119a7b4f08&lt;/span&gt;&lt;br /&gt;Author: hboo &amp;lt;nope&gt;&lt;br /&gt;Date:   Thu May 21 22:51:00 2020 -0400&lt;br /&gt;&lt;br /&gt;    Add proper thoughts page!&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So exciting! Look at that exclamation mark in the commit message! I had to specially write it in vim because I use zsh instead of bash and it gets confused about the exclamation mark when I use it with &lt;code&gt;git commit -m&lt;/code&gt;. (Maybe bash gets confused by &lt;code&gt;!&lt;/code&gt;s in quotes too. I don&#39;t know.) Anyway! Are you ready for the actual good stuff to begin? It&#39;s mostly just jekyll stuff (using &lt;a href=&quot;https://jekyllrb.com/docs/collections/&quot;&gt;collections&lt;/a&gt;):&lt;/p&gt;
&lt;pre class=&quot;language-git&quot;&gt;&lt;code class=&quot;language-git&quot;&gt;&lt;br /&gt;diff --git a/_config.yml b/_config.yml&lt;br /&gt;index 58693b8..8235bb6 100644&lt;br /&gt;&lt;span class=&quot;token deleted&quot;&gt;--- a/_config.yml&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token inserted&quot;&gt;+++ b/_config.yml&lt;/span&gt;&lt;br /&gt;@@ -34,6 +34,8 @@ exclude:&lt;br /&gt;   - Gemfile&lt;br /&gt;   - Gemfile.lock&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token inserted&quot;&gt;+collections:&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token inserted&quot;&gt;+  - thoughts&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; owner:&lt;br /&gt;   name: Heather Booker&lt;br /&gt;&lt;br /&gt;diff --git a/thoughts.html b/thoughts.html&lt;br /&gt;new file mode 100644&lt;br /&gt;index 0000000..45572c7&lt;br /&gt;&lt;span class=&quot;token deleted&quot;&gt;--- /dev/null&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token inserted&quot;&gt;+++ b/thoughts.html&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token coord&quot;&gt;@@ -0,0 +1,18 @@&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token inserted&quot;&gt;+---&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token inserted&quot;&gt;+layout: page&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token inserted&quot;&gt;+title:  Thoughts&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token inserted&quot;&gt;+permalink: /thoughts/&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token inserted&quot;&gt;+---&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token inserted&quot;&gt;+&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token inserted&quot;&gt;+&amp;lt;div class=&quot;thoughts&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token inserted&quot;&gt;+  &amp;lt;div&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token inserted&quot;&gt;+    {% for thought in site.thoughts reversed %}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token inserted&quot;&gt;+    &amp;lt;span class=&quot;post-meta&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token inserted&quot;&gt;+      &amp;lt;span class=&quot;post-date&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token inserted&quot;&gt;+        {{ thought.date | date: &quot;%-d %b %Y&quot; | upcase }}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token inserted&quot;&gt;+      &amp;lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token inserted&quot;&gt;+    &amp;lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token inserted&quot;&gt;+    &amp;lt;div&gt;{{ thought.content }}&amp;lt;/div&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token inserted&quot;&gt;+    {% endfor %}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token inserted&quot;&gt;+  &amp;lt;/div&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token inserted&quot;&gt;+&amp;lt;/div&gt;&lt;/span&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What&#39;s next?&lt;/p&gt;
&lt;pre class=&quot;language-git&quot;&gt;&lt;code class=&quot;language-git&quot;&gt;&lt;br /&gt;diff --git a/_posts/2020-05-19-random-thoughts.md b/_posts/2020-05-19-random-thoughts.md&lt;br /&gt;index a175619..153c9a4 100644&lt;br /&gt;&lt;span class=&quot;token deleted&quot;&gt;--- a/_posts/2020-05-19-random-thoughts.md&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token inserted&quot;&gt;+++ b/_posts/2020-05-19-random-thoughts.md&lt;/span&gt;&lt;br /&gt;@@ -14,7 +14,7 @@ The [original implementation](https://github.com/marenbeam/thoughts) doesn&#39;t inv&lt;br /&gt;&lt;br /&gt; First thought is this hilarious ad on a website for a local music store that I thought was very cute and saved a few weeks ago, for this exact purpose:&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token deleted&quot;&gt;-![steves music store - wash those hands!](/assets/img/steves.png)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token inserted&quot;&gt;+![steves music store - wash those hands!]({{ &#39;/assets/img/steves.png&#39; | relative_url }})&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; 20 May, 2020&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ack! That path fix shouldn&#39;t be in this commit. -_- Darnit, that&#39;s what I get for mixing up doing a million things at once &amp;gt;&amp;lt; The paths are a bit more complicated than I was imagining, because the blog thinks it is at &lt;code&gt;/&lt;/code&gt; but actually it is at &lt;code&gt;/blog/&lt;/code&gt;, so I can&#39;t just throw absolute paths around and call it a day. Puh.&lt;/p&gt;
&lt;p&gt;Tell the world!:&lt;/p&gt;
&lt;pre class=&quot;language-git&quot;&gt;&lt;code class=&quot;language-git&quot;&gt;&lt;br /&gt;@@ -23,3 +23,7 @@ I think this format will not do; it is going to make me censor myself more, beca&lt;br /&gt; 20 May, 2020&lt;br /&gt;&lt;br /&gt; I am a parasite to humanity.&lt;br /&gt;&lt;span class=&quot;token inserted&quot;&gt;+&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token inserted&quot;&gt;+21 May, 2020&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token inserted&quot;&gt;+&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token inserted&quot;&gt;+[I did it!]({{ &#39;/thoughts&#39; | relative_url }}) Bye!&lt;/span&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Nice.&lt;/p&gt;
&lt;p&gt;Next: The original implementation that inspired me strips all newlines, but I want my newlines. However, I don&#39;t want the paragraphs to be spaced as far apart as in regular posts - it makes it harder to scan the page. So I take away the margin from every paragraph that &lt;em&gt;follows&lt;/em&gt; a paragraph by using the &lt;code&gt;element + element&lt;/code&gt; CSS selector. Because the default styling on the blog for paragraphs is to have &lt;code&gt;1.2em&lt;/code&gt; both above and below each one, simply setting the &lt;code&gt;margin-top&lt;/code&gt; isn&#39;t enough - the bottom margin of the paragraph above it is still pushing it away. (Those margins were previously being &lt;a href=&quot;https://css-tricks.com/what-you-should-know-about-collapsing-margins/&quot;&gt;collapsed&lt;/a&gt;.) So it needs a negative margin to overcome that.&lt;/p&gt;
&lt;pre class=&quot;language-git&quot;&gt;&lt;code class=&quot;language-git&quot;&gt;&lt;br /&gt;diff --git a/_sass/pages/_thoughts.scss b/_sass/pages/_thoughts.scss&lt;br /&gt;new file mode 100644&lt;br /&gt;index 0000000..f2fd639&lt;br /&gt;&lt;span class=&quot;token deleted&quot;&gt;--- /dev/null&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token inserted&quot;&gt;+++ b/_sass/pages/_thoughts.scss&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token coord&quot;&gt;@@ -0,0 +1,5 @@&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token inserted&quot;&gt;+.thoughts {&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token inserted&quot;&gt;+  p + p {&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token inserted&quot;&gt;+    margin-top: -1.2em;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token inserted&quot;&gt;+  }&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token inserted&quot;&gt;+}&lt;/span&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And import that style file:&lt;/p&gt;
&lt;pre class=&quot;language-git&quot;&gt;&lt;code class=&quot;language-git&quot;&gt;&lt;br /&gt;diff --git a/_sass/leonids.scss b/_sass/leonids.scss&lt;br /&gt;index 225ff25..f338ed7 100644&lt;br /&gt;&lt;span class=&quot;token deleted&quot;&gt;--- a/_sass/leonids.scss&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token inserted&quot;&gt;+++ b/_sass/leonids.scss&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token coord&quot;&gt;@@ -21,3 +21,4 @@&lt;/span&gt;&lt;br /&gt; @import &lt;span class=&quot;token string&quot;&gt;&quot;pages/tags&quot;&lt;/span&gt;;&lt;br /&gt; @import &lt;span class=&quot;token string&quot;&gt;&quot;pages/archive&quot;&lt;/span&gt;;&lt;br /&gt; @import &lt;span class=&quot;token string&quot;&gt;&quot;pages/post&quot;&lt;/span&gt;;&lt;br /&gt;&lt;span class=&quot;token inserted&quot;&gt;+@import &quot;pages/thoughts&quot;;&lt;/span&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I guess there&#39;s no scoping of css to certain pages automatically by jekyll; it has to be done manually. So I actually first released the blog with all the paragraphs being squished together, because I was SO EAGER and didn&#39;t double check the other pages. Just the new one. üòÇ It was only afterwards that I addded the &lt;code&gt;.thoughts&lt;/code&gt; scope to the &lt;code&gt;p + p&lt;/code&gt;. Regression check, my friends!&lt;/p&gt;
&lt;p&gt;Last but certainly not least is the glorious thought generator. I largely copied the existing new post generator that I use (&lt;a href=&quot;https://hboo.ca/blog/posts/2017-02-28-xiannys-awesome-jekyll-post-generator&quot;&gt;by Xianny&lt;/a&gt; (who I met!! it was so cool! people are just the best.&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://hboo.ca/blog/posts/2020-05-19-random-thoughts/#fn1&quot; id=&quot;fnref1&quot;&gt;[1]&lt;/a&gt;&lt;/sup&gt;)), but simpler because thoughts don&#39;t have titles, or tags.&lt;/p&gt;
&lt;pre class=&quot;language-git&quot;&gt;&lt;code class=&quot;language-git&quot;&gt;&lt;br /&gt;diff --git a/thought b/thought&lt;br /&gt;new file mode 100755&lt;br /&gt;index 0000000..ac77be4&lt;br /&gt;&lt;span class=&quot;token deleted&quot;&gt;--- /dev/null&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token inserted&quot;&gt;+++ b/thought&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token coord&quot;&gt;@@ -0,0 +1,19 @@&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token inserted&quot;&gt;+#!/bin/bash&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token inserted&quot;&gt;+# This script creates a new thought in jekyll with pre-filled front matter.&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token inserted&quot;&gt;+# Run `./thought` to generate a thought.&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token inserted&quot;&gt;+&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token inserted&quot;&gt;+FILEDIR=&quot;_thoughts&quot;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token inserted&quot;&gt;+FILENAME=&quot;$FILEDIR/$(date +%F-%H-%M-%S).md&quot;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token inserted&quot;&gt;+&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token inserted&quot;&gt;+echo &quot;---&quot; &gt; $FILENAME&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token inserted&quot;&gt;+echo &quot;date: $(date &#39;+%F %T&#39;)&quot; &gt;&gt; $FILENAME&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token inserted&quot;&gt;+echo &quot;---&quot; &gt;&gt; $FILENAME&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token inserted&quot;&gt;+&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token inserted&quot;&gt;+if command -v nvim&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token inserted&quot;&gt;+then&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token inserted&quot;&gt;+    nvim $FILENAME&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token inserted&quot;&gt;+else&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token inserted&quot;&gt;+    vi $FILENAME&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token inserted&quot;&gt;+fi&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token inserted&quot;&gt;+&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token inserted&quot;&gt;+echo $FILENAME&lt;/span&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Also, the filenames are based on date-time down to the second. I started this paragraph to say that it&#39;s not terribly robust, if you generate two thoughts within the same minute the second one will overwrite the first, but then I remembered it is &lt;em&gt;seconds&lt;/em&gt; not &lt;em&gt;minutes&lt;/em&gt;, and it would be pretty hard to write two thoughts in the same second. So nevermind.&lt;/p&gt;
&lt;p&gt;Anyway, so far the whole thing is pretty sweet! You are actually looking at a lot of manipulated git history - I am quite liberal with my interactive rebases and force pushes, which allows me to pretend I wrote everything right the first time, which I definitely did not. ;D&lt;/p&gt;
&lt;p&gt;Next up, I made some improvements to this script and the new post generator script.&lt;/p&gt;
&lt;p&gt;Every time I would finish editing a post, when I would close it, the path to my editor would be printed in the terminal, because of this line:&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;command&lt;/span&gt; -v nvim&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That &lt;code&gt;command -v&lt;/code&gt; thing checks if &lt;code&gt;nvim&lt;/code&gt; is available. But then if it is, it prints the path to nvim, &lt;code&gt;/usr/bin/nvim&lt;/code&gt;, which is slightly confusing every time I see it. So the magical world of internet told me I could try appending &lt;code&gt;&amp;gt;/dev/null 2&amp;gt;&amp;amp;1&lt;/code&gt; to the end of the check. I don&#39;t know what each part of it does, something about not mashing standard error into standard out, but it sends the output into oblivion aka &lt;code&gt;/dev/null&lt;/code&gt;&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://hboo.ca/blog/posts/2020-05-19-random-thoughts/#fn2&quot; id=&quot;fnref2&quot;&gt;[2]&lt;/a&gt;&lt;/sup&gt; which is good enough for me! So that line became&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;command&lt;/span&gt; -v nvim &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;/dev/null &lt;span class=&quot;token operator&quot;&gt;&lt;span class=&quot;token file-descriptor important&quot;&gt;2&lt;/span&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token file-descriptor important&quot;&gt;&amp;amp;1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I don&#39;t really know what &lt;code&gt;/dev/null&lt;/code&gt; is, except that it is oblivion. It is where perfectly useless information goes to die, get swept away and cleaned up, and not be accessed or accessible.&lt;/p&gt;
&lt;p&gt;The next improvement brought the thought generator closer to that from which is was inspired. Since the original script goes through all of git add + commit + push, I wanted a little taste of that, but with the safety that comes with not pushing things to production automatically every time...since that is a little beyond my comfort level, as a mini control freak. üòõ&lt;/p&gt;
&lt;p&gt;For the thought generator:&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$FILENAME&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; commit -m &lt;span class=&quot;token string&quot;&gt;&quot;Think a thought&quot;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;You thinked a thought! Run &#39;git push&#39; to tell the world! Or just to get it off your chest.&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Everything except pushing the thought. Instead a cute reminder to push it.&lt;/p&gt;
&lt;p&gt;Also &lt;code&gt;git commit&lt;/code&gt; spits some output to the terminal, so you get to see the filename and commit, as a reminder that it really happened. ^^&lt;/p&gt;
&lt;p&gt;Whereas for the new post generator, I kept it a little simpler:&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt; -N &lt;span class=&quot;token variable&quot;&gt;$FILENAME&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;New post &lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$FILENAME&lt;/span&gt;&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt; has been added to git tracked files&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I struggled with the right wording for the second half of the message.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;quot;is now being tracked by git&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;has been added to the list of tracked files in git&amp;quot;&lt;/li&gt;
&lt;li&gt;?????&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But what I chose seems as good as any. ¬Ø\_(„ÉÑ)_/¬Ø&lt;/p&gt;
&lt;p&gt;What I wanted for a new post was just for the &lt;em&gt;file&lt;/em&gt; to be tracked, but not for the contents to be staged. So I used &lt;code&gt;git add -N&lt;/code&gt;, so that I can use &lt;code&gt;git add --patch&lt;/code&gt; to manually review the contents that I am about to commit. I also wanted the filename to be printed, so I could remember which one I just wrote.&lt;/p&gt;
&lt;p&gt;Anyway, I am pretty thrilled with how things came out! I think writing these little shell scripts is really fun, and I had never done it much before. The thoughts page itself is exactly as heckin adorable as I thought it would be. On the other hand, I am concerned that it is slightly addictive. I find myself thinking of cute one-liners all day long that could go there, and I have to resist the urge to put every thought I ever think on that page. Thanks for joining me on this trip! Make sure to think lots of thoughts today and always. üòÉ (Sorry, this ending feels very sudden and uncoordinated. I hate reading articles like that. Um...bye!)&lt;/p&gt;
&lt;hr class=&quot;footnotes-sep&quot; /&gt;
&lt;section class=&quot;footnotes&quot;&gt;
&lt;ol class=&quot;footnotes-list&quot;&gt;
&lt;li id=&quot;fn1&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;&amp;quot;people are just the best.&amp;quot; Help I sound like a dog !! üòÇ &lt;a href=&quot;https://hboo.ca/blog/posts/2020-05-19-random-thoughts/#fnref1&quot; class=&quot;footnote-backref&quot;&gt;‚Ü©Ô∏é&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn2&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;True story, once while I was at &lt;a href=&quot;https://www.recurse.com/&quot;&gt;the Recurse Center&lt;/a&gt; (or maybe somewhere else, I don&#39;t know now that I think about it üòÇ), I was showing someone something, or doing a presentation, and I had some code snippets that I was just playing around with in a folder called &lt;code&gt;~/dev/null&lt;/code&gt;, because &lt;code&gt;~/dev&lt;/code&gt; seemed like a reasonable location for all my code, and &lt;code&gt;null&lt;/code&gt; seemed like a reasonable location for nonsense code. I had never heard of &lt;code&gt;/dev/null&lt;/code&gt; and had no idea I was mimicking it, but whoever enlightened me certainly thought it was funny. üòÇ &lt;a href=&quot;https://hboo.ca/blog/posts/2020-05-19-random-thoughts/#fnref2&quot; class=&quot;footnote-backref&quot;&gt;‚Ü©Ô∏é&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
	</entry>
	
	<entry>
		<title>Where to gitignore what</title>
		<link href="https://hboo.ca/blog/posts/2020-05-02-where-to-gitignore-what/"/>
		<updated>2020-05-02T00:00:00Z</updated>
		<id>https://hboo.ca/blog/posts/2020-05-02-where-to-gitignore-what/</id>
		<content type="html">&lt;p&gt;I downloaded a little plugin the other day; you might use something like it yourself, if you&#39;re a super nerd (sorry..): it&#39;s called &lt;a href=&quot;https://github.com/dpacassi/disable-javascript&quot;&gt;disable-javascript&lt;/a&gt;. It&#39;s a browser addon that I use in Firefox to maximize speed and minimize annoyance when visiting one of the bajillions of overloaded how-to and fake-news and cooking websites, where by &amp;quot;overloaded&amp;quot; I mean there&#39;s 999 ads, and auto-playing videos and pop-ups and newsletter subscriptions all vying for my attention when all I want is basic content.  However, the addon also breaks many things you may want to use on the interwebs. You&#39;ve been warned.&lt;/p&gt;
&lt;p&gt;Anyway, I was playing around with this addon - first I had it in &amp;quot;default on&amp;quot; mode (meaning JS is allowed), and so when I visited annoying websites, I would add them as an &amp;quot;exception&amp;quot;, which would mean they would have javascript disabled. But then I realized that was a losing battle, and it would be much better to use &amp;quot;default off&amp;quot; mode which disables JS everywhere. When I made the switch, however, my list of &amp;quot;exceptions&amp;quot; from phase 1 stuck around, and now they were exceptions in the &lt;em&gt;opposite&lt;/em&gt; direction; that is to say, all the websites I wanted to block were now being permitted. It turns out the exceptions list has no concept of whether sites should be blocked or allowed - it just does the opposite of whatever the current setting is. That&#39;s a little inconvenient for people like me who can&#39;t make up our minds. üòÖ&lt;/p&gt;
&lt;p&gt;Now, what better to do when you find a problem than SOLVE IT?? Indeed dear readers, so I hunted down the &lt;a href=&quot;https://github.com/dpacassi/disable-javascript&quot;&gt;code&lt;/a&gt;, forked the project from Github, and started trying to add a flag for &amp;quot;block&amp;quot; vs &amp;quot;allow&amp;quot; locally. Part of the setup was &lt;code&gt;npm install&lt;/code&gt; which generates a local directory &lt;code&gt;node_modules/&lt;/code&gt;, full of libraries that you most definitely (probably, except in weird cases, I guess) do not want to track in Git. Generally this would be accomlished by having a row in the project&#39;s &lt;code&gt;.gitignore&lt;/code&gt;, telling Git not to worry about anything in &lt;code&gt;node_modules/&lt;/code&gt;, so that when you do &lt;code&gt;git status&lt;/code&gt; it doesn&#39;t say that everything in &lt;code&gt;node_modules&lt;/code&gt; is untracked, or when you do &lt;code&gt;git add .&lt;/code&gt; it doesn&#39;t try to add anything in &lt;code&gt;node_modules&lt;/code&gt;, etc. But the &lt;code&gt;.gitignore&lt;/code&gt; for this project (which existed! that was my first question) mysteriously did not contain any mention of &lt;code&gt;node_modules&lt;/code&gt;. Had previous contributors, including the main creator/maintainer, all just quietly and carefully ignored it themselves in their brains?&lt;/p&gt;
&lt;p&gt;Idk, I&#39;m not a mind reader (as much as I sometimes try to be). Being the helpful human I am though, I made a pull request to add &lt;code&gt;node_modules&lt;/code&gt; to the project&#39;s &lt;code&gt;.gitignore&lt;/code&gt;. Now, here is where the plot thickens! The maintainer replied to me (very kindly, I must add - I opened a pile of PRs and issues at the same time and the maintainer was very patient with me üòâ) to explain that, while they agree that &lt;code&gt;node_modules&lt;/code&gt; should not be committed, I should actually have it in my &lt;em&gt;global&lt;/em&gt; git config to ignore it everywhere. &amp;quot;Best practice!&amp;quot; they said. (Though not actually quite like that, alone as a sentence or with an explanation mark. That is me taking liberties with the editing.) Wow! I thought. I had never heard of such a concept, to centralize things like a python ENV or node_modules to a global .gitignore.&lt;/p&gt;
&lt;p&gt;So I searched the internet high and low for &amp;quot;best practices on global vs project gitignores&amp;quot;. Just kidding, I searched for 2 minutes&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://hboo.ca/blog/posts/2020-05-02-where-to-gitignore-what/#fn1&quot; id=&quot;fnref1&quot;&gt;[1]&lt;/a&gt;&lt;/sup&gt;‚Ä≤ &lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://hboo.ca/blog/posts/2020-05-02-where-to-gitignore-what/#fn2&quot; id=&quot;fnref2&quot;&gt;[2]&lt;/a&gt;&lt;/sup&gt;, before realizing the internet in general was not going to offer trustworthy answers and I had better find a true source of truth, which ended up being &lt;code&gt;man gitignore&lt;/code&gt;. The &lt;a href=&quot;https://github.com/git/git/blob/master/Documentation/gitignore.txt#L43&quot;&gt;relevant lines&lt;/a&gt; are there for you to investigate. The section I wanted was about &amp;quot;Which file to place a pattern in&amp;quot;, and the most important sections were the first and third (&amp;quot;other repositories&amp;quot; means other developers local copies of the same project):&lt;/p&gt;
&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt; * Patterns which should be version-controlled and distributed to&lt;br /&gt;   other repositories via clone (i.e., files that all developers will want&lt;br /&gt;   to ignore) should go into a `.gitignore` file.&lt;br /&gt;&lt;br /&gt; * Patterns which a user wants Git to&lt;br /&gt;   ignore in all situations (e.g., backup or temporary files generated by&lt;br /&gt;   the user&#39;s editor of choice) generally go into a file specified by&lt;br /&gt;   `core.excludesFile` in the user&#39;s `~/.gitconfig`. Its default value is&lt;br /&gt;   $XDG_CONFIG_HOME/git/ignore. If $XDG_CONFIG_HOME is either not set or&lt;br /&gt;   empty, $HOME/.config/git/ignore is used instead.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I had a &lt;em&gt;real&lt;/em&gt; hard time with the first sentence. My problem was interpreting &amp;quot;patterns&amp;quot; to mean &amp;quot;the actual files represented by the patterns&amp;quot;. So I thought it meant &amp;quot;Files which should be version-controlled ..(ie, those that all developers will want to ignore)...&amp;quot; which is utterly contradictory. Either you want them version controlled, or you want them ignored. You can&#39;t have it both ways people! I thought maybe they forgot a &amp;quot;n&#39;t&amp;quot; at the end of &amp;quot;should&amp;quot;. I went on a long voyage reading about &lt;a href=&quot;https://git-scm.com/community&quot;&gt;how to contribute to git using the mailing list&lt;/a&gt; so that I could fix the manpage, before eventually realizing that when it says &amp;quot;Patterns which should be ....&amp;quot;, &amp;quot;Pattern&amp;quot; literally means &lt;em&gt;the actual plaintext word in the .gitignore file&lt;/em&gt; and not the file itself. -__-&lt;/p&gt;
&lt;p&gt;Luckily though, now we can go back to business with the disable-javascript project, because I have it on good word that my pull request actually does make sense, and if I love anything, it&#39;s being right. üòâ (Shh, don&#39;t tell.)&lt;/p&gt;
&lt;p&gt;In summary:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;text editor-specific or operating system-specific files go in &lt;em&gt;global&lt;/em&gt; git config to ignore&lt;/li&gt;
&lt;li&gt;project (and therefore language)-specific files go in &lt;em&gt;project&lt;/em&gt; &lt;code&gt;.gitignore&lt;/code&gt; to be committed and shared with fellow devs working on the same project&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Cool beans kiddie winks, thanks for hanging around! Also, make sure you know what you&#39;re talking about before emailing the whole mailing list of git. Heh, that would have been awkward.&lt;/p&gt;
&lt;hr class=&quot;footnotes-sep&quot; /&gt;
&lt;section class=&quot;footnotes&quot;&gt;
&lt;ol class=&quot;footnotes-list&quot;&gt;
&lt;li id=&quot;fn1&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;During my 2 minutes of searching I found &lt;a href=&quot;https://www.reddit.com/r/node/comments/7i229x/global_gitignore_node_modules/&quot;&gt;this reddit thread&lt;/a&gt;, which I now wish desperately to answer to help the next me who comes along, but the thread is closed. PUH. üò¶ &lt;a href=&quot;https://hboo.ca/blog/posts/2020-05-02-where-to-gitignore-what/#fnref1&quot; class=&quot;footnote-backref&quot;&gt;‚Ü©Ô∏é&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn2&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;Also, can you tell I figured out how to make REAL FOOTNOTES?! Very cool. So much better than my haphazard asterisks system. I might have to go through old posts and fix them up. üòÉ &lt;a href=&quot;https://hboo.ca/blog/posts/2020-05-02-where-to-gitignore-what/#fnref2&quot; class=&quot;footnote-backref&quot;&gt;‚Ü©Ô∏é&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
	</entry>
	
	<entry>
		<title>Glossary</title>
		<link href="https://hboo.ca/blog/posts/2020-04-25-glossary/"/>
		<updated>2020-04-25T00:00:00Z</updated>
		<id>https://hboo.ca/blog/posts/2020-04-25-glossary/</id>
		<content type="html">&lt;p&gt;Here&#39;s another glorious tidbit from the past, which is actually really exciting because it demonstrates to me that my grasp of French has, in fact, improved in the last few years! üòÇ *&lt;/p&gt;
&lt;p&gt;*: Some chat clients (slack, signal? discord, zulip) convert certain terms between colons(&lt;code&gt;:&lt;/code&gt;) into emojis! üòÇ becomes the crying laughing face, üò≠ the crying crying face, :lever_les_yeux_au_ciel: the rolling eyes face when you have slack configured to be in French. (My Francophone colleagues especially find it strange and bemusing that I use slack in French - nobody else does, and it leads me to find weird bugs and develop strange habits like referring to &amp;quot;@ici&amp;quot; instead of &amp;quot;@here&amp;quot;. But how else will I learn to say &amp;quot;roll your eyes&amp;quot;, if not by searching for the emoji in French?!)&lt;/p&gt;
&lt;p&gt;Anyway, here&#39;s the little stub of a post that doesn&#39;t actually explain anything. Apparently I thought a glossary would be useful, which is cute, but like, a lot of maintenance. So, not gonna happen. üòÑ&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;8 MAR 2017&lt;/p&gt;
&lt;p&gt;Voici une collection des termes que je pense que soient nEcessaires ou utiles pour comprendre mes postes. J&#39;espEre que cette vous aide. &lt;!--more--&gt;[&lt;a href=&quot;https://hboo.ca/blog/posts/2020-04-25-glossary/#c&#39;est-bon&quot;&gt;Why is this in French?&lt;/a&gt;]&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Term&lt;/th&gt;
&lt;th&gt;Word Class&lt;/th&gt;
&lt;th&gt;Meaning&lt;/th&gt;
&lt;th style=&quot;text-align:right&quot;&gt;Notes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;IRC&lt;/td&gt;
&lt;td&gt;f&lt;/td&gt;
&lt;td&gt;f&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;f&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RC&lt;/td&gt;
&lt;td&gt;c&lt;/td&gt;
&lt;td&gt;s&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;g&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;{:.table}&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&quot;c&#39;est-bon&quot;&gt;C&#39;est bon &lt;a class=&quot;direct-link&quot; href=&quot;https://hboo.ca/blog/posts/2020-04-25-glossary/#c&#39;est-bon&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;The preamble to this glossary is in French because I felt like it. It hopefully translates to &amp;quot;Here is a collection of terms that I think are necessary or useful for understanding my posts. I hope it helps.&amp;quot; I like other languages and hope you do too.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Back to the present:&lt;/p&gt;
&lt;p&gt;So, that was cute, I hope you agree. The capitalized Es in the French part are my shorthand for when I know I need an accent but I&#39;ll insert it later. It&#39;s adorable to read because now I am amazed that I constructed those sentences and thought they were correct. It&#39;s still understandable though I&#39;m pretty sure! I might write a bit more in French in the future; in fact, hopefully a post will come soon to elaborate on a desire that I have to expand the breadth of this blog outside of code. Stay tuned les amis ! üòâ&lt;/p&gt;
&lt;p&gt;In other notes, I guess the random letters in the columns were placeholders while I figured out how to do tables? And also the &amp;quot;Why is this in French?&amp;quot; link is cool, except it links to like 2 lines down, so if you click the link you can&#39;t tell it actually did anything, which is less than ideal. &amp;gt;&amp;lt;&lt;/p&gt;
&lt;p&gt;¬Ø\_(„ÉÑ)_/¬Ø&lt;/p&gt;
&lt;p&gt;Bye!&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>How to control spotify from the command line</title>
		<link href="https://hboo.ca/blog/posts/2020-04-19-how-to-control-spotify-from-the-command-line/"/>
		<updated>2020-04-19T00:00:00Z</updated>
		<id>https://hboo.ca/blog/posts/2020-04-19-how-to-control-spotify-from-the-command-line/</id>
		<content type="html">&lt;p&gt;Holy buhjeebus the amount of steps. I just want to listen to business casual. Ya know... Let&#39;s keep it business. Let&#39;s keep it casual. Let&#39;s keep it...fun.&lt;/p&gt;
&lt;p&gt;So! Here comes, how to listen to spotify from the terminal in fedora. YMMV (Your mileage may vary).&lt;/p&gt;
&lt;p&gt;Copy this handy AF simple AF (you&#39;re gonna have to look that acronym up yourself...unless you&#39;re my mom, then don&#39;t worry about it mom) script from this amazing life saving person, that I only found after downloading 298374 other super complicated things that didn&#39;t do what I wanted, at all. Like mobify or mobidy or mondiby or something.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://gist.github.com/wandernauta/6800547&quot;&gt;https://gist.github.com/wandernauta/6800547&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It&#39;s just a gist! That&#39;s how simple it is! Amazing.&lt;/p&gt;
&lt;p&gt;So, wherever you keep your code, maybe in &lt;code&gt;~/code&lt;/code&gt;? Start yourself a nice new file called &lt;code&gt;control-spotify.sh&lt;/code&gt; and paste the code from that gist into it. Save. Then we&#39;ll make a symlink to that script in somewhere that exists in your path, so you can execute this script easily.&lt;/p&gt;
&lt;p&gt;Look at the output from &lt;code&gt;echo $PATH&lt;/code&gt; - every path between colons (&lt;code&gt;:&lt;/code&gt;) is where your computer will look for stuff when you type a command. My path includes &lt;code&gt;/usr/local/bin&lt;/code&gt;, so I&#39;m gonna put it there.&lt;/p&gt;
&lt;p&gt;There&#39;s a couple more puzzle pieces around making the script easy to call. First, what will we type to invoke the script? I want to control spotify by typing &lt;code&gt;sp&lt;/code&gt;, as inspired by the original gist title, because that&#39;s short and I&#39;m lazy. You might choose &lt;code&gt;spotify&lt;/code&gt; or &lt;code&gt;musica_pls_dj&lt;/code&gt; or whatever.&lt;/p&gt;
&lt;p&gt;So, to symlink the script:&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;ln&lt;/span&gt; -s ~/code/control-spotify.sh /usr/local/bin/sp&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(PS, I never used symlinks before yesterday. Just in case you think &amp;quot;aw, symlinks, that is magic stuff I&#39;ll never understand&amp;quot;, since that&#39;s what I thought 3 days ago, and every day before that. üòâ )&lt;/p&gt;
&lt;p&gt;Make sure you specify the whole path &lt;code&gt;~/code/...&lt;/code&gt; even if you&#39;re already in &lt;code&gt;~/code&lt;/code&gt; and think you can simply do &lt;code&gt;control-spotify.sh&lt;/code&gt;, because the next time you run &lt;code&gt;sp&lt;/code&gt;, our friend computer doesn&#39;t know that and can&#39;t find the script. Sad face. üò¶&lt;/p&gt;
&lt;p&gt;Then we want to make the script executable (files ending in &lt;code&gt;.sh&lt;/code&gt; are not by default executable! idk why. probably to save us from our dangerous selves):&lt;br /&gt;
&lt;code&gt;chmod u+x ~/code/control-spotify.sh&lt;/code&gt;&lt;br /&gt;
I actually used &lt;code&gt;chmod +x&lt;/code&gt; (no &lt;code&gt;u&lt;/code&gt;), which modifies the permission for everyone; adding &lt;code&gt;u&lt;/code&gt; restricts it to the current user, if I understand correctly. I don&#39;t really know which one you should use. You do you.&lt;/p&gt;
&lt;p&gt;So, now you should be able to do&lt;br /&gt;
&lt;code&gt;sp&lt;/code&gt;&lt;br /&gt;
and it should print out a happy little list of possible commands.&lt;/p&gt;
&lt;p&gt;Great! Now, I&#39;ve already taken the liberty of actually putting the script in a directory so I could version control it using git, because&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I love git&lt;/li&gt;
&lt;li&gt;I make a lot of mistakes - I prefer to live fast and crash often üòÑ&lt;/li&gt;
&lt;li&gt;I know I will want to make changes, because I can see a lot of comments in the gist&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The first thing I did was try out each command by having a window open with the help output from running &lt;code&gt;sp&lt;/code&gt;, and another window open to run each command. Oh, also, open spotify first. I installed it using &lt;code&gt;snap&lt;/code&gt; as recommended for linux. Right, so here I am gleefully rejoicing when &lt;code&gt;sp play&lt;/code&gt; and &lt;code&gt;sp pause&lt;/code&gt; and &lt;code&gt;sp next&lt;/code&gt; all work! But then &lt;code&gt;sp previous&lt;/code&gt; doesn&#39;t work, it just stops the music, and it won&#39;t restart using &lt;code&gt;sp play&lt;/code&gt;. Sad face. üò¶ On further investigation, it turns out my brain translated &lt;code&gt;prev&lt;/code&gt;, which is the actual command, into &lt;code&gt;previous&lt;/code&gt;, which is not a recognized command and therefore does not have the intended outcome. Ha. So I made a wee change to the script, adding another alias under &lt;code&gt;sp-prev&lt;/code&gt; for &lt;code&gt;sp-previous&lt;/code&gt;. And updated the version from &lt;code&gt;0.1&lt;/code&gt; to &lt;code&gt;0.2.0&lt;/code&gt;, because&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;I like &lt;a href=&quot;https://semver.org/&quot;&gt;semantic versioning&lt;/a&gt; (x.y.z, rather than x.y), and&lt;/li&gt;
&lt;li&gt;I added a feature, so it gets a &amp;quot;minor&amp;quot; bump (bug fixes get a &amp;quot;patch&amp;quot; bump and breaking changes get a &amp;quot;major&amp;quot; bump)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Next, I can keep trying out commands. Most of them work, which is frankly incredible to me considering so little code. After all the cruft I was wading through before, piling on packages and addons in an attempt to get anything functional. KISS Keep it simple stupid!! ‚ù§Ô∏è Some like &lt;code&gt;sp url&lt;/code&gt; don&#39;t work, which I don&#39;t need so I don&#39;t care about 8), and some like &lt;code&gt;sp display&lt;/code&gt; need additional packages installed, but I don&#39;t need to look at album art, so I also don&#39;t care about that. üòÉ Whee!!&lt;/p&gt;
&lt;p&gt;The big trick though is &lt;code&gt;sp search&lt;/code&gt;, which is really what I need - this is how you find songs to play. And spotify has apparently updated their API to require authorization so the original code does squat. D: Let&#39;s take the &lt;a href=&quot;https://gist.github.com/wandernauta/6800547#gistcomment-2113314&quot;&gt;changes @vorbeiei suggests&lt;/a&gt; and try those by replacing the &lt;code&gt;sp-search&lt;/code&gt; function in the code. (There&#39;s a comment just after from someone who made &lt;code&gt;curl&lt;/code&gt; silent for a nice clean output, which is great for when it&#39;s working, but I want all the details I can get while developing!)&lt;/p&gt;
&lt;p&gt;Then we need our client ID and secret - follow the &lt;a href=&quot;https://developer.spotify.com/documentation/general/guides/app-settings/#register-your-app&quot;&gt;spotify docs to register an app&lt;/a&gt;, kindly linked by github user @vorbeiei in their comment. Make your ID. Guess how to insert it into the script, and come back in a couple paragraphs for story time and instructions.&lt;/p&gt;
&lt;p&gt;To test, I&#39;m doing a nice easy search for &amp;quot;Moonshine&amp;quot; (by Caravan Palace) - it was on my spotify home page and it&#39;s a one word search term, which I assume can only help my cause in getting the search to be successful. It looks like the search syntax is either &lt;code&gt;sp search moonshine&lt;/code&gt; or &lt;code&gt;sp moonshine&lt;/code&gt;, but neither of them start moonshine playing. They just spit out curl progress, as if things were making good little requests. To debug, we need to drill down into the script a bit more. I took the first &lt;code&gt;curl&lt;/code&gt; statement out and started fiddling with it in the command line directly.&lt;br /&gt;
&lt;code&gt;curl -H &amp;quot;Authorization: Basic client_id:secret&amp;quot; -d grant_type=client_credentials https://accounts.spotify.com/api/token&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Are you ready for the aforementioned storytime? First I will tell you how to correctly input your freshly generated credentials. Then I will tell you all the ways you could do the &lt;em&gt;wrong&lt;/em&gt; thing, all of which I did. Teehee.&lt;/p&gt;
&lt;p&gt;Do do this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;copy your client_id and secret from the spotify developer page for the app you registered&lt;/li&gt;
&lt;li&gt;stick your client_id and secret together, joined by a &lt;code&gt;:&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;then base64 encode that whole string, without any newlines (&lt;code&gt;base64 -w 0&lt;/code&gt;)*&lt;/li&gt;
&lt;li&gt;jam the whole thing in the auth string for curl: &amp;quot;Authorization: Basic happily_encoded_stuff&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Don&#39;t do this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;plain old insert your client ID and secret as &amp;quot;Authorization: Basic my_client_id:secret&amp;quot;&lt;/li&gt;
&lt;li&gt;nor base64 encode each part seperately, then join them with a &lt;code&gt;:&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;nor base64 encode the whole thing, without removing newlines&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I don&#39;t really know what base64 encoding is, so I just thought the credentials I copied from spotify were already encoded. That was my first problem. The second was trying to encode each part separately then join them with a &lt;code&gt;:&lt;/code&gt;. Both of these were leading me to a &lt;code&gt;{&amp;quot;error&amp;quot;:&amp;quot;invalid_client&amp;quot;}&lt;/code&gt; error from curl. Anyway, it took some noodling as a bash noob, but my eventual process to encode all of this was:&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token assign-left variable&quot;&gt;CREDENTIALS&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;dxfjgbjbkjhgfbjhwhatevermyclientidcopieddirectlyfromspotifyis:jbjhkbkjhgbfsdjhgbkjhsfwhatevermysecretcopieddirectlyfromspotfyis&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;# make sure it worked&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$CREDENTIALS&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token assign-left variable&quot;&gt;CREDS_ENCODED&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; $CREDENTIALS &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; base64 -w &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$CREDS_ENCODED&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;# you should have a single line of 39yijb7hi23h7i!! who doesn&#39;t love that stuff.&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;# now, in the curl command, make the auth string look like:&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;# &quot;Authorization: Basic $CREDS_ENCODED&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Also, I highly recommend adding &lt;code&gt;--verbose&lt;/code&gt; as the first argument to &lt;code&gt;curl&lt;/code&gt;, so you can see exactly what gets sent once the &lt;code&gt;$CREDS_ENCODED&lt;/code&gt; gets evaluated.&lt;/p&gt;
&lt;p&gt;The next problem I ran into was a &lt;code&gt;stream was not closed cleanly: PROTOCOL ERROR&lt;/code&gt;. I had some suspicion that this was due to the line break in the encoded credentials, but I thought that line break was part of the encoding, so what could I do about it?! Of course, &lt;a href=&quot;https://superuser.com/a/1225139&quot;&gt;stack overflow to the rescue&lt;/a&gt; - It turns out you can pass a flag to &lt;code&gt;base64&lt;/code&gt; to &amp;quot;wrap&amp;quot;. Sweet! Next problem! üòÖ&lt;/p&gt;
&lt;p&gt;So with that all sorted out, now we&#39;re back to &lt;code&gt;{&amp;quot;error&amp;quot;:&amp;quot;invalid_client&amp;quot;}&lt;/code&gt;, except now the object contains a new key too: &lt;code&gt;{&amp;quot;error_description&amp;quot;:&amp;quot;Invalid client secret&amp;quot;}&lt;/code&gt; -_-. Gah!&lt;/p&gt;
&lt;p&gt;To solve this, since googling the error wasn&#39;t getting me anywhere, I searching in the github issues and started checking each one that seemed relevant. Eventually I got to one where somebody responded with &lt;a href=&quot;https://github.com/spotify/web-api/issues/1372&quot;&gt;very clear instructions&lt;/a&gt; to use this site for base64 encoding. Failing other leads, I tried it, and compared the result to my local &lt;code&gt;echo $CREDS_ENCODED&lt;/code&gt; - unbelievably, somehow the final character differed, and when I used the web-encoded string, IT WORKED! I got my &lt;code&gt;access_token&lt;/code&gt; in the response! No idea what is happening there. None. At all.&lt;/p&gt;
&lt;p&gt;Anyway, onwards to moonshine! Add &lt;code&gt; \&amp;gt;&amp;gt; token\&lt;/code&gt; to the end of the curl call we were running, then run it again. PS, this is super hacky. You&#39;ve been warned. ¬Ø\&lt;em&gt;(„ÉÑ)&lt;/em&gt;/¬Ø Open the token file, delete everything except the token itself, even the quotes around it. Then in the terminal, run &lt;code&gt;TOKEN=$(cat token)&lt;/code&gt;, and &lt;code&gt;echo $TOKEN&lt;/code&gt; - you should see your token. We are starting to feel like &lt;a href=&quot;https://jvns.ca/blog/2017/12/01/new-zine--so-you-want-to-be-a-wizard/&quot;&gt;wizards&lt;/a&gt; at this point. ;D Now take the second curl statement in the sp script, stick it in the terminal, and replace the authorization &lt;code&gt;$ST2&lt;/code&gt; with &lt;code&gt;$TOKEN&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;By the way, I would totally just have pasted the token directly into the curl command if I could, but I just re-installed my OS and I haven&#39;t figured out how to copy from either the terminal or vi yet. Just saying. üòâ&lt;/p&gt;
&lt;p&gt;In the curl statement, we also have to replace the &lt;code&gt;&amp;quot;q=$Q&amp;quot;&lt;/code&gt;, because we don&#39;t have a &lt;code&gt;$Q&lt;/code&gt; defined. (It is defined a couple lines above in the script - we could just copy that and define Q in the terminal, but I like inlining it for clarity.) So instead, put &lt;code&gt;&amp;quot;q=$@&amp;quot;&lt;/code&gt;. Haha, no wait. I tried it and it turns out the q is for query - if you run the curl with &lt;code&gt;$@&lt;/code&gt;, you get a &amp;quot;400: no search query&amp;quot; response. That&#39;s kindof cool! Did you know that? Now you/I/we know. (Bill Nye reference because he&#39;s great.) Ok so back to reality, replace that q bit: &lt;code&gt;&amp;quot;q=moonshine&amp;quot;&lt;/code&gt;. Oooh we&#39;re so close I can taste it! üòÇ But why doesn&#39;t the script work?! If only I could put a debugger in...huh, the internet suggests &lt;code&gt;set -x&lt;/code&gt; in the script to debug a shell script, so I put it as the first line in the &lt;code&gt;sp-search&lt;/code&gt; function. Ooh, it sure spits out some info, but nothing particularly enlightening. Maybe I will settle for trying to extract each part to a variable, and hopefully that will mean more helpful output.&lt;/p&gt;
&lt;p&gt;So, if I use &lt;code&gt;&amp;gt;&amp;gt; token_response&lt;/code&gt; after the first curl, then &lt;code&gt;cat token_response | grep -E -o &amp;quot;access_token\&amp;quot;:\&amp;quot;[a-zA-Z0-9_-]+\&amp;quot;&amp;quot; -m 1&lt;/code&gt;, I do get the access token extracted, so that&#39;s cool! It looks like that gets assigned to &lt;code&gt;ST&lt;/code&gt; and then &lt;code&gt;ST2&lt;/code&gt; becomes characters 15 through 86 of that, so presumably the token itself. That leaves the final &lt;code&gt;grep&lt;/code&gt; statement as the final possible culprit, so let&#39;s pull it out too and try it in the terminal. (PS, when making hot and sour soup, do cut the daylilies in half. Even short ones are too long. Otherwise you get the spaghetti effect of flinging sauce/liquid everywhere.) Huh, this grep statement seems to work nicely too, returning &lt;code&gt;spotify:track:ID&lt;/code&gt;. Does the problem then lie with &lt;code&gt;sp open&lt;/code&gt;? Ack! If I take that string, and put it on the end of &lt;code&gt;sp open&lt;/code&gt; it works! As a sidenote, I think I am going to discover lots of new music with this - now I am listening to a random song called moonshine that I&#39;ve never heard before. üòÇ&lt;/p&gt;
&lt;p&gt;Oh god, this whole time I thought the bash output produced when I set &lt;code&gt;set -x&lt;/code&gt; was masking the credentials variable somehow, but in reality it was just ...nothing. So the first query fails, so everything else fails. Facepalm! Preliminary googling reveals &lt;a href=&quot;https://www.digitalocean.com/community/tutorials/how-to-read-and-set-environmental-and-shell-variables-on-a-linux-vps&quot;&gt;answers from Digital Ocean&lt;/a&gt;...&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We now have a shell variable. This variable is available in our current session, but will not be passed down to child processes.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;D&#39;oh! I need &lt;code&gt;export&lt;/code&gt; to make &lt;code&gt;$CREDENTIALS&lt;/code&gt; available to the &lt;code&gt;sp&lt;/code&gt; script.&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;export&lt;/span&gt; CREDENTIALS&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the long term, that needs to be exported in my &lt;code&gt;/.zshrc&lt;/code&gt;, with the actual base64 encoded string.&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token assign-left variable&quot;&gt;CREDENTIALS&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;jhdfgkjsdbfkugabuyb34ouyfbosdufgyurWHEEEwhatever&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Aaaand I&#39;m feeling like a genius, now that it finally works! Thanks for tuning in, friends and countrymice. üòÉ&lt;/p&gt;
&lt;p&gt;PS, here&#39;s the final version, nicely wrapped up in a repo with condensed instructions! Enjoy!&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/heatherbooker/spotify-cli&quot;&gt;https://github.com/heatherbooker/spotify-cli&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;*Don&#39;t do &lt;code&gt;base64 -w 0&lt;/code&gt;. I still don&#39;t know what it does weird, but...just keep reading.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Choosing an Outreachy project</title>
		<link href="https://hboo.ca/blog/posts/2020-04-19-choosing-an-outreachy-project/"/>
		<updated>2020-04-19T00:00:00Z</updated>
		<id>https://hboo.ca/blog/posts/2020-04-19-choosing-an-outreachy-project/</id>
		<content type="html">&lt;p&gt;So, this post was drafted years (no, &lt;em&gt;literally&lt;/em&gt; years) ago when I was applying to Outreachy, and it just stayed a draft forever because I guess I thought there was more to it. It turns out, there wasn&#39;t, because if there was, it would be there. Ha! I still think it&#39;s interesting though, and I want it out of my &amp;quot;untracked files&amp;quot; when I run &lt;code&gt;git status&lt;/code&gt;*, so here it comes, in all its overdue glory. üòâ&lt;/p&gt;
&lt;p&gt;*: I could have another branch for this draft, and commit it there. But then I will just forget it exists. Also if I did that and ever actually finished it, it would entail way more git overhead than I want to deal with. So - publish or bust, baby!&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;24 MAR 2017&lt;/p&gt;
&lt;p&gt;Oh my goodness. There are so many things pulling me in different directions, making me second guess where I&#39;ve gone with my application to &lt;a href=&quot;https://wiki.gnome.org/Outreachy&quot;&gt;Outreachy&lt;/a&gt;, and with a few days before the deadline, I still feel like a jumping bean bouncing around between projects and priorities! Here are some of the factors influencing my decisions.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;How much I stand to learn from participating in this project&lt;/li&gt;
&lt;li&gt;How well organized/set up/documented everything is&lt;/li&gt;
&lt;li&gt;How helpful the mentor/people involved are to me&lt;/li&gt;
&lt;li&gt;How friendly the mentor/people involved are to me&lt;/li&gt;
&lt;li&gt;How much autonomy and freedom I think I&#39;ll have&lt;/li&gt;
&lt;li&gt;Whether my mentor or any of my team members are female (is that sexist? like...this whole thing is gender-based so..?)&lt;/li&gt;
&lt;li&gt;The languages and technologies used for that project&lt;/li&gt;
&lt;li&gt;How capable I think I will be of completing the project without driving my mentor nutz with questions&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I&#39;m also kinda worried that people normally just choose and focus on one project to apply to, whereas I have multiple (actually..SO MANY) that I would love to work on and I hope they don&#39;t all get lost in space! üò¢ That would be so sad face!&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;Back to the present!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This post is so beautifully typically &lt;em&gt;Heather&lt;/em&gt;. Of course there&#39;s a whole list of 8 decision factors, qualified with the fact that the 8 are only &lt;em&gt;some&lt;/em&gt; of what&#39;s influencing my decision. Also, it turns out, I think this is probably also a good list to bring to job interviews.&lt;/p&gt;
&lt;p&gt;Except that I would do well to worry less about the last point. If I suck, they can fire me. :angel_face: Realistically though, if I suck, I will get better. That is to say: if I ask a lot of questions, I will learn. And asking questions can highlight existing problems in systems (technical ones or people ones), and make other people feel smart and useful (cool!), and build rapport with colleagues. And if feel that I have too many questions, I can spread them out to the internet, and stack overflow, and other friends. Nice! Now stop worrying. üòÉ&lt;/p&gt;
&lt;p&gt;The end.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>im not a programmer</title>
		<link href="https://hboo.ca/blog/posts/2019-12-24-im-not-a-programmer/"/>
		<updated>2019-12-24T00:00:00Z</updated>
		<id>https://hboo.ca/blog/posts/2019-12-24-im-not-a-programmer/</id>
		<content type="html">&lt;p&gt;Why I don&#39;t feel like a programmer:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;I use a mac at work&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Real programmers don&#39;t like Apple.&lt;br /&gt;
Real programmers embrace all the manual dirty work they have to do configuring and trouble shooting basic functions on this or that linux distro.&lt;br /&gt;
I just want shit to work.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;I use package managers&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Mac has homebrew.&lt;br /&gt;
At home on Fedora, I just use the software manager GUI. If I want something not through it, I have to look up instructions. I don&#39;t even know what my package manager is.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;I use my mouse&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Real programmers only use the keyboard.&lt;br /&gt;
Also, they can type without looking.&lt;br /&gt;
Not me.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;I forget how to use FZF in vim every time my manager shows me&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;ctrl + p. ctrl + p. This time I&#39;ll remember.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;I don&#39;t know how to write a bash script&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Did you know bash doesn&#39;t have types? An int and a string are the same thing. What does that even mean? Idk.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Or an awk script&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I can&#39;t process files fast. Wouldn&#39;t that be fun? My coworker is going to make a text editing mini war for us all. Bet I won&#39;t succeed.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Or use that JSON processing thing&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Like you pipe JSON into it and process it and get answers. In goes JSON, out comes object.key[2]. This was a problem when I wanted to find out if our users ever request a certain field from one of our GraphQL endpoints - I needed to process a lot of logfile. Which reminds me,&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;I have to copy pasta and double check the steps every time to 1) SSH, or 2) deploy&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;scp&lt;/code&gt; is an alien concept. And every other tool that Julia Evans has a cute cartoon explaining. I don&#39;t know the syntax or the rules and I&#39;m scared to screw anything up. Maybe that&#39;s a good thing, on second thought. At least in some ways.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Or know how to set up a server&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;It has to like, connect to the internet or something right? And have some software running on it? At least an OS? An operating system counts as software right?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Or know how to explain what a server is&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I asked my friend if the software her company uses is just for them, or available for anyone to use. She said, &amp;quot;It&#39;s on a server...whatever that means.&amp;quot;. I said, yeah I don&#39;t know - a computer that does stuff? Maybe without you? Then her roommate explained like a textbook: a server is a specialized computer that whatever whatever I don&#39;t know I don&#39;t remember, I was busy being sad that I didn&#39;t really know what a server was.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;I&#39;ve never managed my own memory&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I don&#39;t know how a computer works. There&#39;s memory and nands and ands and ors and nors. I&#39;ve never used C or C++ or C# or C- or C%.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;I prefer doing to planning&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I don&#39;t want to think through every possible outcome and option, I just want to make stuff.&lt;br /&gt;
That&#39;s too waterfall-y. But it means I run up against lots of impossible solutions, and spend time trying plan A then ditching in favour of plan B then returning to plan A. Seems like a waste of time. I&#39;m scatterbrained.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;I prefer doing to reading&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I don&#39;t want to read through the whole React docs every time there&#39;s an update, I just want to make stuff.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;I don&#39;t care much about history&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Who is Luna Lovegood? I mean Eva Rotwell? I mean...the girl? The famous one? Who wrote a program, or maybe she didn&#39;t?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;I use google services&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;And skype, and whatsapp, and I have a facebook account - multiple facebook accounts.&lt;br /&gt;
Real programmers are wary of that stuff.&lt;br /&gt;
Real programmers use discord, and signal, and tox, and the onion, and tor, and maybe the onion is actually just the logo for tor, and..?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;I&#39;m just a web developer.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I&#39;m just a front end developer.&lt;br /&gt;
I don&#39;t have an engineering degree.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;But I&#39;m a web developer who can&#39;t even do CSS.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Isn&#39;t that, like, all web developers are good for? CSS?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;I don&#39;t need long chunks of uninterrupted time.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Real programmers get in a state of flow.&lt;br /&gt;
Real programmers need quiet and space to produce genius inventions. I just make forms. No genius required.&lt;br /&gt;
I have no right to complain about noise or interruptions.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;I don&#39;t play video games.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Ack! They all play video games. And chess. And ping pong. I&#39;m an alien! They play chess because they focus and get in flow state and analyse...just like the last point.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Anyway.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;That&#39;s better&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Anyway, I feel a bit better now. I can still be a programmer if all of the above is true. I&#39;m not static (I can still learn things). I can&#39;t learn everything at once (and I&#39;m still fresh enough in programming - 4 years isn&#39;t a very long time!) I am just me and I can use my strengths of curiousity and desire to make nice things ‚ù§Ô∏è And that&#39;s enough!&lt;/p&gt;
&lt;p&gt;Buhbye now.&lt;/p&gt;
&lt;p&gt;PS - Don&#39;t forget to be nice to your less nerdy co-workers. Don&#39;t show surprise when they could be about to have a learning opportunity. Make them feel welcome and valued no matter their background and methods. In short, be kind to one another. üòÉ ‚ù§Ô∏è&lt;/p&gt;
&lt;p&gt;PPS - I picked up a couple &lt;a href=&quot;https://adventofcode.com/&quot;&gt;advent of code&lt;/a&gt; puzzles, because I thought that might be a fun way to feel a little bit more like a programmer again. I think it&#39;s working. üòÉ&lt;/p&gt;
&lt;p&gt;PPPS - Did you forget the first PS already? Go back to it! üòâ&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Should I stay or should I go now</title>
		<link href="https://hboo.ca/blog/posts/2018-04-14-should-i-stay-or-should-i-go-now/"/>
		<updated>2018-04-14T00:00:00Z</updated>
		<id>https://hboo.ca/blog/posts/2018-04-14-should-i-stay-or-should-i-go-now/</id>
		<content type="html">&lt;p&gt;&lt;strong&gt;: Wherein I discuss the weirdness of half ppl being like &amp;quot;GTFO L8ER !*#$&amp;amp;S&amp;quot;, and the other half like &amp;quot;wut where u goin jus chill out&amp;quot;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I am struck by a strange dichotomy of phenomenons that I find in tech job mentalities.&lt;/p&gt;
&lt;p&gt;One goes a little like this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You&#39;ve been there 9 months and you&#39;re not looking for a new job?! Why not?!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;While the contrary goes like:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Yeah, this place is good. I can seek out what I need within my company and I am well supported here.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Perhaps you identify with one or the other mentality. Certainly I found myself happily settling into my workplace, grateful for the autonomy and influence I was given, grateful for the people I worked with, grateful for interesting challenges without undue pressure and unachievable deadlines. But more and more, I felt like the walls were closing in on me - walls of&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;quot;But you&#39;ll never grow if you stay in the same place!&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;You could get a nice big pay bump if you changed companies.&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;It&#39;s so boring to stay in one place, when are you going to quit?&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;Companies don&#39;t care about you or keeping you learning and engaged.&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;You&#39;ll lose your edge if you don&#39;t quit every 9 months.&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;You gotta swoop in, write a bunch of shit real fast so you look good, and then move on and leave the shit for some other suckers.&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And I grew more and more unhappy.&lt;/p&gt;
&lt;p&gt;How stupid was I to think I could stay in this job! What a joke to be anywhere longer than a year and a half! A real programmer would never dream of doing such a thing! All the cool people get in and get out!&lt;/p&gt;
&lt;p&gt;And worse, thoughts of money haunted me. I didn&#39;t ask for enough when I was being hired. I am getting underpaid because I&#39;m a woman. I didn&#39;t fight hard enough for a raise. I could get more elsewhere. I&#39;m gonna be stuck at this pay level for the rest of my life. Everyone else is making more than me. The hard work I do is utterly uncorrelated to my compensation. I&#39;ll never have enough money.&lt;/p&gt;
&lt;p&gt;What absurdity! I am so priveleged to have a job and a salary and all of the wonderful things I have, and life is too short to spend it worrying about how much money I don&#39;t make. Alas, it was too late - I was brainwashed by these messages of &amp;quot;more money, shorter jobspans&amp;quot; and becoming rather unnerved by the whole shebang.&lt;/p&gt;
&lt;p&gt;As I began to express these opinions in surprise to my fellow humans, I discovered that some for whom I had deep respect had remained at their current jobs - sometimes their first jobs! - for 3 and 5 and 6 years, and maybe even had no plans of leaving.&lt;/p&gt;
&lt;p&gt;Incredible! I thought. Unheard of! I mentally pencilled names onto my list of &amp;quot;evidence you don&#39;t have to quit every couple weeks&amp;quot;.&lt;/p&gt;
&lt;p&gt;To counter my anguish around my stagnant position and questionable &lt;a href=&quot;https://www.wordreference.com/fren/remuneration&quot;&gt;remuneration&lt;/a&gt;*, I mentally and emotionally checked out from my job. I spent a while just drifting around, completing projects as required, complaining and commiserating with my dissatisfied colleagues, and half-heartedly considering alternatives, but without taking any action.&lt;/p&gt;
&lt;p&gt;Then finally, after one day of roaming the office making snide comments and just generally dumping my newfound negativity on everyone, I was struck by the uncertain reactions of the unfortunate humans on the receiving end of my hostility. I am nothing if not overly sensitive to other peoples&#39; reactions, and I was taken aback by their being taken aback - I had to explain myself multiple times, as if my sass was so unexpected as to be un-understandable. That day, I called my mom. It went something like this:&lt;/p&gt;
&lt;p&gt;&amp;quot;Hi Mom. I&#39;m becoming grumpy. I think everyone around me is grumpy. But I don&#39;t have to be grumpy. I could keep being happy despite other peoples&#39; grumpy.&amp;quot;&lt;/p&gt;
&lt;p&gt;&amp;quot;Indeed dearie.&amp;quot;&lt;/p&gt;
&lt;p&gt;And that was how I came around to realizing that just because other people express distaste for their co-workers or managers or jobs, or just because other people want more more more money, or just because wHATEVER, doesn&#39;t mean I have to join their petty and petulant pity parties. I can - and I want to - keep appreciating what I have, respecting those around me, and being content in my life as it is. I know my job is good and that I have rich opportunities where I am, challenges waiting for me to rise up and meet them, and mentorship from others if I only am brave enough to solicit their wisdom and knowledge.&lt;/p&gt;
&lt;p&gt;Sometimes it&#39;s important for me to be reminded that I can go my own way in life. The choices I make are the right ones, even if there were 1347236572898986397924 other ones I could have made, because any path is a good path if I am on it üòâ. Other people do cool things and have cool thoughts, but I do too, and if they want to be negative and share that negativity with me, I am sorry to be a nice non-porous metal wall from which they can bounce away to find somewhere else to seep in. I prefer to be a role model of positivity and satisfaction than a sheep of sourness and bitter endings.&lt;/p&gt;
&lt;p&gt;With that, I am off to enjoy my life, and practice this principle in all corners of it. I hope you too are reminded to go your own way, but smell the roses along the path - other people can trample their own roses, but don&#39;t let them trample yours too! üòÉ&lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;Note about &lt;em&gt;remuneration&lt;/em&gt;: My french-speaking colleague used this word and I wondered if he had erred in his translation from French, but it turns out to be a technically-correct-but-rather-rare-and-generally-with-a-slightly-different-meaning word meaning &lt;em&gt;pay&lt;/em&gt;. Presumably in French it is more commonly used. Cool.&lt;/li&gt;
&lt;/ul&gt;
</content>
	</entry>
	
	<entry>
		<title>MobX + React: Can you use this.props in @computeds?</title>
		<link href="https://hboo.ca/blog/posts/2017-11-27-mobx-n-react-can-you-use-this-n-props-in-computeds/"/>
		<updated>2017-11-27T00:00:00Z</updated>
		<id>https://hboo.ca/blog/posts/2017-11-27-mobx-n-react-can-you-use-this-n-props-in-computeds/</id>
		<content type="html">&lt;p&gt;I am an &lt;code&gt;@computed&lt;/code&gt; evangelist when it comes to &lt;code&gt;get&lt;/code&gt;ters in the many MobX-React components my team writes for work. I prowl around PRs, hunting for unsuspecting plain ol&#39; innocent getters like this:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;@observer &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Potato&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Component&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  @observable frend &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Ms. Beans&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;grewInTheGround&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;earthlyInfo&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;source &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;the ground&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; look&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; i&lt;span class=&quot;token string&quot;&gt;&#39;m a paytaytoe { this.grewInTheGround &amp;amp;&amp;amp; &#39;&lt;/span&gt;from the ground&#39; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;...and POuNCinG on them: &amp;quot;What if we used &lt;code&gt;@computed&lt;/code&gt; for that grewInTheGround getter? Check out &lt;a href=&quot;https://mobx.js.org/refguide/computed-decorator.html&quot;&gt;the docs&lt;/a&gt;!&amp;quot;&lt;/p&gt;
&lt;p&gt;This was a gleeful pastime of mine until one day I was rudely* interrupted by a co-worker not so easily convinced.  They mentioned that for a getter function containing solely MobX observed properties, they would of course also advocate for the use of computed, but &lt;em&gt;this&lt;/em&gt; getter relied on only React props from a parent component. They doubted the effectiveness of the decorator in the case where props could influence the getter.&lt;/p&gt;
&lt;p&gt;Huh, I thought. (Well actually, first I thought HMPH!, but then I thought better of it and realized ah ha, a learning opportunity!) I hadn&#39;t considered the fact that props might not be supervised in the same way other MobX observables are.&lt;/p&gt;
&lt;p&gt;Some background:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Decorators are like, JS functions with &lt;code&gt;@&lt;/code&gt; in front that just magically do stuff to whatever they&#39;re applied to.&lt;/li&gt;
&lt;li&gt;Mobx is a state management library that is based on observables.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So I went straight to the MobX docs and checked if they mentioned props. I checked about computed, and observables, and observer, and React, and optimization, and common pitfalls, and best practices. Result: no. (Sidenote, I wrote the notes for this blog post nearly a month ago now so I am fuzzy on some details, like exactly how much the answer to my question was not contained in the docs. -_-)&lt;/p&gt;
&lt;p&gt;Next, to google with variations on &#39;Can you use this.props in computed mobx&#39;. I found exactly 0 anythings that were helpful. Eventually I migrated my efforts to &lt;a href=&quot;https://github.com/mobxjs/mobx&quot;&gt;mobxjs/mobx&lt;/a&gt; on Github and searched just &#39;computed props&#39;, then opened every issue that looked remotely relevant.&lt;/p&gt;
&lt;p&gt;(In retrospect, I should have been looking for whether props are &lt;em&gt;observable&lt;/em&gt; and not whether they belong in @computeds, but this did not occur to me because changes in props clearly impacted the render function. Upon realizing this, I decided I had thought that because obviously React was managing the render function. This is also not true because that would totally at least 50% defeat the purpose of using MobX to optimize(minimize) renderings. Whatever.)&lt;/p&gt;
&lt;p&gt;I started on one issue, &amp;quot;Discrepancy between re-computation between render and computed&amp;quot;, and then found the gold mine &lt;a href=&quot;https://github.com/mobxjs/mobx/issues/1075#issuecomment-312801921&quot;&gt;in one comment&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Since 4.0 props are an observable...&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Dammnnnnnnn! Ok to &lt;a href=&quot;https://github.com/mobxjs/mobx-react/blob/master/CHANGELOG.md#thisprops-and-thisstate-in-react-components-are-now-observables-as-well&quot;&gt;the changelog&lt;/a&gt; we go. A sub-header of v4.0 is entitled &amp;quot;this.props and this.state in React components are now observables as well&amp;quot; - bingo!! Well, there you go. The answer is yes, we should use @computed for getters that access props values as well as internal class observed values.&lt;/p&gt;
&lt;p&gt;But we can&#39;t stop now, we&#39;re just getting started. They threw a little teaser into the changelog description there:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;For more details see &lt;a href=&quot;https://github.com/mobxjs/mobx-react/pull/136&quot;&gt;#136&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And whoowee, there&#39;s a lot of chattin&#39; in that thread. Also the whole description is &amp;quot;see &lt;a href=&quot;https://github.com/mobxjs/mobx-react/issues/124&quot;&gt;#124&lt;/a&gt;&amp;quot; - #124 is an issue containing discussion leading up to the making of this.props being observed.&lt;/p&gt;
&lt;p&gt;At this point I was jumping around between all of these tabs, trying to make sense of it all and answer questions like &amp;quot;what is this HoC they keep mentioning?&amp;quot;(spoiler, higher-order-component) and &amp;quot;wait, so how deeply or shallowly is props observed?&amp;quot;.&lt;/p&gt;
&lt;p&gt;If we look again at the first example code above, where the computed accesses &lt;code&gt;this.props.earthlyInfo.source&lt;/code&gt;, with pre-4.0 MobX, the computed would run if &lt;code&gt;this.props.earthlyInfo.source&lt;/code&gt; was modified. Now, the computed also re-runs if &lt;code&gt;this.props.earthlyInfo&lt;/code&gt; itself is changed, like if the component was rendered with new data: &lt;code&gt;&amp;lt;Potato earthlyInfo={{source: &#39;kindly neighbour&#39;}} /&amp;gt;&lt;/code&gt;. Good to know! You can see an example of how this was implemented in &lt;a href=&quot;https://github.com/mobxjs/mobx-react/pull/136/files/0bcf70bee3068a1b3df51b1969c28805625b59e5&quot;&gt;this PR&lt;/a&gt;; it pretty much cycles through props and observes each one.&lt;/p&gt;
&lt;p&gt;Pleasingly, I am now able to sleep at night and continue my &lt;code&gt;@computed&lt;/code&gt; calling during the day, in full knowledge that I am bettering the efficiency of our code ever ever so slightly. üòâ&lt;/p&gt;
&lt;p&gt;Life is beautiful and birds are singing, as they say.&lt;/p&gt;
&lt;p&gt;And hey, a lovely unexpected side effect of this knowledge slurping extravangza was that it recharged my interest in what I was doing at work, at a time when I felt very dulled by menial tasks and repetitve going-ons. It reminds me that sometimes it&#39;s important to take some time out of the grind in order to refresh my perspective and remember that Stuff Is Interesting! I really respect that my manager can&#39;t resist digging into the internals of everything they touch and I hope to keep channeling that. Props to them and to you and to everyone who doesn&#39;t just skim the surface but gets their hands dirty!&lt;/p&gt;
&lt;p&gt;SHORT ANSWER IF YOU SKIMMED IN THE HOPES OF JUST FINDING THE FRICK OUT BECAUSE the docs are pretending to be all fancy n whatever but u got sTUFF to do: YA PROPS ARE OBSERVED U can use them in ur @computed üëç .&lt;/p&gt;
&lt;p&gt;* Note: No offense to the speaker of this statement intended; &#39;rudely&#39; is merely employed as a figure of speech. üòÉ&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Wat the FLIP does Firefox think it&#39;s doing with 138% of my CPU power?!</title>
		<link href="https://hboo.ca/blog/posts/2017-04-21-wat-the-flip-does-firefox-think-its-doing-with-138-of-my-cpu-power/"/>
		<updated>2017-04-21T00:00:00Z</updated>
		<id>https://hboo.ca/blog/posts/2017-04-21-wat-the-flip-does-firefox-think-its-doing-with-138-of-my-cpu-power/</id>
		<content type="html">&lt;p&gt;Oh my bananas, I am having a computer crisis. It all started when I was nOT tOUCHING mY cOMPUTER at all and the only application running (to my knowledge) was Firefox, which had like 4 tabs open. &amp;quot;So what?&amp;quot; you think. &amp;quot;Who cares?&amp;quot; you ask. Well, my fan was going as hard as it could for several iterations of several minutes. I was starting to worry for my baby&#39;s health. Also, lately my battery has been dying way too fast for a laptop in its first year of life. So I was concerned.&lt;/p&gt;
&lt;p&gt;Let me walk you through my process over the last hour and a half.&lt;/p&gt;
&lt;p&gt;I notice the fan going and going and GOING AND GOING AND GOING AND --&lt;/p&gt;
&lt;p&gt;I vaguely remember some fabulous new profiling tool I discovered in the last couple days that showed me CPU usage. What was it? Something short...hblot...&lt;code&gt;top&lt;/code&gt;!&lt;/p&gt;
&lt;p&gt;I forget why I first wanted to check &lt;code&gt;top&lt;/code&gt; out. Oh yeah, I was indexing a bunch of stuff in Elasticsearch and my computer was srsly struggling. It was using around 110 - 135% CPU which at first was utterly confusing, because you can&#39;t have more than a hundred per cent of a thing, cuz &lt;em&gt;per cent&lt;/em&gt; means &lt;em&gt;OUT OF A HUNDRED&lt;/em&gt; and THAT&#39;S NOT HOW THAT WORKS. (I&#39;ve been reading this blog lately with a lot of YELLING...I&#39;m sorry üòÇ)&lt;/p&gt;
&lt;p&gt;Anyway, turns out CPU usage is expressed (at least by &lt;code&gt;top&lt;/code&gt;, I don&#39;t know whether other tools follow the same principle) in usage of one processor.&lt;/p&gt;
&lt;p&gt;Right, so Elasticsearch was doing all this (presumably) computationally expensive stuff, dealing with all the data I was giving it with 0 mappings or structure (types? what&#39;s a type?), using &amp;gt;100% CPU. The fan was going crazy then too, so the parallels between these situations are not looking good.&lt;/p&gt;
&lt;p&gt;I &lt;code&gt;ctrl-alt-T&lt;/code&gt; and &lt;code&gt;top&lt;/code&gt; and &lt;code&gt;enter&lt;/code&gt; and FIREFOX WAS USING &amp;gt; 100% CPU! WAT THA FROCK! I close it, kill the process (why is that necessary? why didn&#39;t closing it like a normal person kill it? so many questions.), reopen it, and great, now 20-30% at rest and 60-70% while using.&lt;/p&gt;
&lt;p&gt;I mean, small blessings? But to me, that still seems like an awful lot when I want to have Firefox and Sublime and Opera and Vim and Rhythmbox&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://hboo.ca/blog/posts/2017-04-21-wat-the-flip-does-firefox-think-its-doing-with-138-of-my-cpu-power/#fn1&quot; id=&quot;fnref1&quot;&gt;[1]&lt;/a&gt;&lt;/sup&gt; and a server or two running alongside it. There&#39;s not gonna be enough %s to go around, and somebody is going to be left in the dust.&lt;/p&gt;
&lt;p&gt;I do some googling, which suggests:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;My browser is outdated (no.)&lt;/li&gt;
&lt;li&gt;I should enable hardware acceleration (no.)&lt;/li&gt;
&lt;li&gt;My addons/plugins are being greedy - okay, maybe!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I disable &lt;a href=&quot;https://www.mozilla.org/en-US/lightbeam/&quot;&gt;Lightbeam&lt;/a&gt; as my first action, which brings the CPU usage from 60% to 30% while using and 15-20% if I&#39;m not touching it, although all I have to do to cause a 5-10% spike is mouse over it, so that&#39;s weird. Maybe it&#39;s a coincidence. Sidenote, Lightbeam is a Firefox browser extension made by Mozilla which tracks websites tracking you basically, and all the requests that happen in your browser. I was originally checking it out as a potential Outreachy project. But if it turns out it takes 30% of my CPU, take it away!&lt;/p&gt;
&lt;p&gt;Woohoo! Ok, so now we&#39;re making progress. Next I disable session manager which saves all my tabs and reopens them next time I open the browser, which Opera automatically does for me and I adore because I am 100% a tab hoarder. Then I try some browsing while keeping an eye on &lt;code&gt;top&lt;/code&gt; and NOPE, back at 50-70%. Shucks, turns out Lightbeam wasn&#39;t actually doing any insane-o CPU hogging after all.&lt;/p&gt;
&lt;p&gt;So I just straight up switch to Safe Mode, which disables all extensions, to see if any other addons or maybe the whole lot of them combined are being sneaky little buggers. I go to Youtube and before I can even click on anything my CPU usage is back at 138%!!!! I wish I could write numbers in capitals. ONE HUNDRED AND THIRTY EIGHT PERCENT!! (No wait, my teacher always told me, if you say &amp;quot;and&amp;quot;, it means hundredths. ONE HUNDRED THIRTY EIGHT PERCENT!!! That&#39;s better.)&lt;/p&gt;
&lt;p&gt;Anyway I google more stuff and checkout Chrome, which has MULTIPLE PROCESSES RUNNING Chrome wtf u think ur doing?! Pff. This makes it really hard to compare with Firefox&#39;s one number because I need to add like 4 or 5 numbers and that is toO many numbers friends. TOo many. Also I&#39;d like to point out that I am semi-gleeful at discovering this, because I&#39;ve heard some negative things about Chrome eating way more resources than is reasonable and I think maybe I have cracked the secret. Next I try my trusty friend Opera which also has multiple processes! Opera! How could you betray me like this!?? I&#39;ll just say each process of Opera and Chrome is generally around 20%. Sometimes they&#39;ll go up to 45% or 70% or more.&lt;/p&gt;
&lt;p&gt;Now I am googling different stuff: &amp;quot;Why does Chrome use multiple processes&amp;quot;. I think this will explain all of Chrome&#39;s bad behaviour. Ever. What I find is &lt;a href=&quot;https://www.google.com/googlebooks/chrome/&quot;&gt;this comic&lt;/a&gt;, elaborating some interesting thing on the design of Google Chrome (sorry, I just realized I&#39;ve been saying &amp;quot;Chrome&amp;quot; as if Google Chrome owns that term. How did they get away with using the universal name for a major part of the browser for &lt;em&gt;their&lt;/em&gt; browser? Hmph. Making it confusing out here.), including:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Each process is a tab!&lt;/li&gt;
&lt;li&gt;This means that if one webpage has something silly like an infinite loop, only that tab needs to be killed as opposed to the whole browser.&lt;/li&gt;
&lt;li&gt;This system is based on how operating systems open threads for each process.&lt;/li&gt;
&lt;li&gt;This also ensures greater security, as each tab is isolated. (I am definitely simplifying here.)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This comic is 39 pages long and I am on page 29. I&#39;ll get there eventually. Maybe. I do recommend checking it out though if you&#39;re interested.&lt;/p&gt;
&lt;p&gt;Bonus - remember how I said I don&#39;t need to enable hardware acceleration? I decided this because in my settings, the checkbox for &amp;quot;Enable hardware acceleration&amp;quot; is ticked. Seems pretty clear right? Nah, jk. Checking some more advanced settings page tucked away somewhere (as these things always are) exposed that actually, apparently my OS was blocking this from happening. From what I understand, I don&#39;t want to force enable this because bad things could happen, ie, something about webby acceleration scripts exploiting OS vulnerabilities, or something. So I&#39;m just gonna not touch that.&lt;/p&gt;
&lt;p&gt;To conclude, I learned some stuff about Google Chrome&#39;s design, and I solved nothing so my computer is still a minion&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://hboo.ca/blog/posts/2017-04-21-wat-the-flip-does-firefox-think-its-doing-with-138-of-my-cpu-power/#fn2&quot; id=&quot;fnref2&quot;&gt;[2]&lt;/a&gt;&lt;/sup&gt; to the browsers siphoning as much power as their grubby paws can. Do let me know if you think you are more smarticle than I in this matter and wish to assist. üòÉ&lt;/p&gt;
&lt;p&gt;UPDATE OH MY DOG Opera has calmed down while I&#39;ve been writing and each process is now using under 10% it&#39;s a miracle??!!?&lt;/p&gt;
&lt;hr class=&quot;footnotes-sep&quot; /&gt;
&lt;section class=&quot;footnotes&quot;&gt;
&lt;ol class=&quot;footnotes-list&quot;&gt;
&lt;li id=&quot;fn1&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;&amp;quot;Yo, why the heck you need two browsers and two text editors?!&amp;quot; Whatever, don&#39;t judge me! Sometimes one sucks and you gotta switch over but then that one sucks too so...well...NYEH. &lt;em&gt;sticks tongue out&lt;/em&gt; &lt;a href=&quot;https://hboo.ca/blog/posts/2017-04-21-wat-the-flip-does-firefox-think-its-doing-with-138-of-my-cpu-power/#fnref1&quot; class=&quot;footnote-backref&quot;&gt;‚Ü©Ô∏é&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn2&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;This line used to read &amp;quot;...my computer is still a slave&amp;quot;. I am trying to remove uses of common tech terms that perpetuate white supremacy from 1) my vocabulary and 2) my bubble, starting with blacklist/whitelist and master/slave. &lt;a href=&quot;https://hboo.ca/blog/posts/2017-04-21-wat-the-flip-does-firefox-think-its-doing-with-138-of-my-cpu-power/#fnref2&quot; class=&quot;footnote-backref&quot;&gt;‚Ü©Ô∏é&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
	</entry>
	
	<entry>
		<title>Adventures with Mozilla Con&#39;t</title>
		<link href="https://hboo.ca/blog/posts/2017-03-20-adventures-with-mozilla-cont/"/>
		<updated>2017-03-20T00:00:00Z</updated>
		<id>https://hboo.ca/blog/posts/2017-03-20-adventures-with-mozilla-cont/</id>
		<content type="html">&lt;p&gt;&amp;quot;Con&#39;t&amp;quot; is how I used to abbreviate &amp;quot;continued&amp;quot; when I took notes in HS/uni. The good old days. I could never use my laptop even in university (ie when I had one) to take notes in class because the instant I would get even remotely disinterested, I would be totally gone and only tune back in to be hella confused. Dis bad.&lt;/p&gt;
&lt;p&gt;Anyway, since deciding that continuing to explore &amp;amp; contribute to Mozilla would be better than trying to (frantically, because that&#39;s apparently the &lt;em&gt;only&lt;/em&gt; way) apply for other jobs, I have found myself much happier.&lt;/p&gt;
&lt;p&gt;Today I set up &lt;a href=&quot;https://opensource.com/resources/what-docker&quot;&gt;Docker&lt;/a&gt;!  Holy smokes finally the time has come! It always gets mentioned - even when I told Stanley I wanted to work on Blaggregator (RC&#39;s internal blog aggregator...don&#39;t you love that name!), he said:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Oh, talk about a piece of cake! I added a Dockerfile when I was contributing so now it should be super easy to set up!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Bah humbug, I thought. Well, that&#39;s not quite true. I was just surprised that he thought that made it easier. I thought that made it harder - now I had to set up Docker &lt;em&gt;and&lt;/em&gt; the actual code. Docker just always seemed like this magical, elusive technology that advanced devs used, and I couldn&#39;t justify taking time to explore it myself because I never really &lt;em&gt;needed&lt;/em&gt; it.&lt;/p&gt;
&lt;p&gt;Also, I think I like to do things the hard way. Sometimes. Sometimes I am trigger happy and I &lt;code&gt;apt-get install&lt;/code&gt; like a..whatever, similies are hard. But then I balance that out by sometimes doing everything I can to avoid installing dependencies. For example, I would like to check out BMO, or &lt;a href=&quot;http://bugzilla.mozilla.org/&quot;&gt;bugzilla.mozilla.org&lt;/a&gt;, Mozilla&#39;s bug tracker. I first tried just getting it running. Then I relented and turned to Docker, though still resisted using &lt;a href=&quot;https://docs.docker.com/compose/overview/&quot;&gt;docker-compose&lt;/a&gt;, a Docker container management tool. I sleuthed enough to figure out that the &lt;code&gt;docker-compose.yml&lt;/code&gt; file contained some tidbits of tasty info, of which I (perhaps erroneously? I still don&#39;t know) decided the only important bits were this:&lt;/p&gt;
&lt;pre class=&quot;language-yml&quot;&gt;&lt;code class=&quot;language-yml&quot;&gt;    &lt;span class=&quot;token key atrule&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;80:80&quot;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;5900:5900&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ah! This means I must bind the port on my machine (host!) to that on the container. I also decided 5900 was the only important one to bind...probably not true, in retrospect. However, the way I tried to get around this was to amend my command to run the container:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# Original:&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;sudo&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;docker&lt;/span&gt; run bmo-dev&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;# New attempt:&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;sudo&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;docker&lt;/span&gt; run -p&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;127.0&lt;/span&gt;.0.1:5900:5900 bmo-dev&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I tried a few other syntaxes (syntacies?) but nothing seemed to be available in my browser üò¢ so I resorted to installing docker-compose.&lt;/p&gt;
&lt;p&gt;Also, I aliased &lt;code&gt;docker&lt;/code&gt; to &lt;code&gt;sudo docker&lt;/code&gt; because it always needs to be run with root privledges and ain&#39;t nobody got time to type sudo every time. I decided this is sufficiently innocuous. Please educate me if I am wrong. Also by &amp;quot;time to type&amp;quot; I mean &amp;quot;brain power to remember to type&amp;quot; and &amp;quot;experience to understand that the error message has nothing to do with debugging docker and everything to do with needing MOAR POWER.&amp;quot;.&lt;/p&gt;
&lt;p&gt;Things I&#39;m learning:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In Perl, &lt;code&gt;$&lt;/code&gt; identifies a scalar variable (string, num) while &lt;code&gt;@&lt;/code&gt; identifies an array&lt;/li&gt;
&lt;li&gt;&lt;code&gt;127.0.0.1&lt;/code&gt; is the magical built-in-to-my-computer Apache server!&lt;/li&gt;
&lt;li&gt;Patience.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Tune in next time to find out moar things about Mozilla and Outreachy! And maybe life! I talked to a couple mentors lately about their projects and it is making me super excited at the prospect of being fully involved in them! üòÉ)&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>I applied to Outreachy, and I didn&#39;t use my name</title>
		<link href="https://hboo.ca/blog/posts/2017-03-14-i-applied-to-outreachy-and-didnt-use-my-name/"/>
		<updated>2017-03-14T00:00:00Z</updated>
		<id>https://hboo.ca/blog/posts/2017-03-14-i-applied-to-outreachy-and-didnt-use-my-name/</id>
		<content type="html">&lt;p&gt;It&#39;s all in the title. I formally submitted my application to participate in the wonderful Outreachy today. If you haven&#39;t heard of it, Outreachy is an amazing internship opportunity to be a (paid!) contributor to FOSS (Free and Open Source Software) for underrepresented groups in tech (more details &lt;a href=&quot;https://wiki.gnome.org/Outreachy&quot;&gt;here&lt;/a&gt;). For Outreachy, this means:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;women: cis and trans&lt;/li&gt;
&lt;li&gt;trans men&lt;/li&gt;
&lt;li&gt;genderqueer persons&lt;/li&gt;
&lt;li&gt;Black/African Americans&lt;/li&gt;
&lt;li&gt;Hispanic/Latin@s&lt;/li&gt;
&lt;li&gt;American Indians&lt;/li&gt;
&lt;li&gt;Alaska Natives&lt;/li&gt;
&lt;li&gt;Native Hawaiians&lt;/li&gt;
&lt;li&gt;Pacific Islanders&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Of relevance to me is the first category listed - women. It is awesome that a buncha companies come together to support these minorities getting involved in tech pursuits. I&#39;m so happy this opportunity exists, because gender equality still has a long way to come.&lt;/p&gt;
&lt;p&gt;At my first tech meetup, I had just read this article about &lt;a href=&quot;https://www.theatlantic.com/magazine/archive/2014/05/the-confidence-gap/359815/&quot;&gt;The Confidence Gap&lt;/a&gt;. I found it very compelling, and was still thinking about it as I watched the presentations. I signed up that day, in the spirit of the article, to do something I felt underqualified for (some of you, dear readers, may know that this has since been a motto of mine) - give a talk at the next meetup about this very topic. This &amp;quot;Confidence Gap&amp;quot; the authors speak of refers to the statistical truth that women less frequently do all manner of things such as apply for jobs or promotions when they don&#39;t meet 100% of the listed qualifications. Unfortunately, the side of this coin that they focus on - women&#39;s lack of confidence in themselves - is only half the story, &lt;em&gt;if&lt;/em&gt; that. The other half, of course, is the rest of the world discounting and undermining women&#39;s abilities and contributions.&lt;/p&gt;
&lt;p&gt;I wanted to make sure I tied my talk back to tech - how lucky for me that there was an analysis of Github contributions by gender recently released (&lt;a href=&quot;https://peerj.com/preprints/1733/&quot;&gt;here&lt;/a&gt;, more readable version with more opinions &lt;a href=&quot;https://www.theguardian.com/technology/2016/feb/12/women-considered-better-coders-hide-gender-github&quot;&gt;here&lt;/a&gt;). The findings were that pull requests (PRs) from women were accepted more often than men - across the top 10 languages! Holy smokes! Then comes the twist-ending: women who were socially identifiable as women (typically female names, avatars, etc) had PRs accepted &lt;em&gt;less&lt;/em&gt; than men, while women with gender-neutral profiles had PRs accepted &lt;em&gt;more&lt;/em&gt; than men.&lt;/p&gt;
&lt;p&gt;Ulp*.&lt;/p&gt;
&lt;p&gt;Fast forward a few months. I finished my stint at the &lt;a href=&quot;https://recurse.com/&quot;&gt;Recurse Center&lt;/a&gt;, a beautiful programming community where I never had to give a second thought to being a woman. Recently someone I vaguely know shared &lt;a href=&quot;http://www.attn.com/stories/15518/creative-sexism-experiment-female-co-worker&quot;&gt;this article&lt;/a&gt; along with a comment explaining &amp;quot;This is why I go by &amp;lt;uncommon, not-decidedly-gendered name&amp;gt;&amp;quot;. This made me think hard about going by a name that wouldn&#39;t &amp;quot;obviously&amp;quot; express my gender.&lt;/p&gt;
&lt;p&gt;The first problem with this is that I &lt;em&gt;like&lt;/em&gt; my name. I don&#39;t want to actually be known by and called an alternative name. However, I thought that perhaps I could just change it on Github. Maybe just my @handle. I already changed my IRC nick from &lt;code&gt;heatherboo&lt;/code&gt; to &lt;code&gt;hboo&lt;/code&gt; (a name which I have since been informed is still decidedly feminine), due to this whole sexism thing, as well as being encouraged by IRC guides (Mozilla&#39;s own I believe) to not use a female nick unless I want to be harrassed. Thus, why not change my Github username too? That&#39;s what most people see when I go to make a contribution, raise an issue, or comment on anything. I get to know people by their 1) Github usernames and 2) IRC nicks. It should be easy enough to change my username, and maybe even my listed name. Then people would respect me more. They wouldn&#39;t mansplain stuff. They would take me more seriously. I wouldn&#39;t be &amp;quot;just a dumb girl&amp;quot; or &amp;quot;just a front end developer&amp;quot;**.&lt;/p&gt;
&lt;p&gt;Thus I submitted my application to Outreachy with the &amp;quot;male version of my name&amp;quot;, Heath. In doing this I discovered the many things intertwined with changing my name - my Google account and email address. My other email address. My resume. Job applications. The degree to which this change felt like it needed to propogate in order to be worth doing began to be more than a tad ominous.&lt;/p&gt;
&lt;p&gt;I started writing this article. I consulted a trusted friend in tech about this name-change dilemma. Many important points were raised - including by just re-reading some of the article on Github contributions I linked above. The grand takeaway though, is that continuing to publicly present as a woman is important for solidarity. As a new contributor to Mozilla projects, I gravitate towards working on ones with female main contributors. I look up to them for no reason other than they are &lt;strong&gt;a woman in tech&lt;/strong&gt;. Increasing the visible presence of minorities in tech is a cause in-and-of itself, and while it means I give up the chance to masquerade as a man, be given opportuities and credit where I wouldn&#39;t otherwise, and then reveal my true identity and &amp;quot;prove&amp;quot; the &amp;quot;real&amp;quot; value of women to people who favour men, it&#39;s also incredibly valuable. It also may even have perks of its own - as one woman is quoted in the above article as saying:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;...if my gender has any effect at all, I feel they [the men] go out of their way to support my efforts to learn and make more contributions.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Jenny Bryan, professor at the University of British Columbia and contributor to R&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This brings us full circle, back to Outreachy - communities may be putting in that little bit of extra resources to support minorities in tech. And that is a beautiful thing.&lt;/p&gt;
&lt;p&gt;&amp;lt;span class=&#39;hboo-vertical-space&#39;&amp;gt;&amp;lt;/span&amp;gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;* &lt;em&gt;Ulp&lt;/em&gt;. The sound one makes when swallowing a big ol&#39; ball of fear and dread.&lt;/p&gt;
&lt;p&gt;** &amp;quot;just a front end developer&amp;quot; - I remember someone complaining she was sick of going to tech events and having people assume she was &amp;quot;just someone&#39;s girlfriend&amp;quot;, &amp;quot;just a designer&amp;quot;, or &amp;quot;just a front end developer&amp;quot;. Ick! Front end development isn&#39;t exactly a cake walk as far as I&#39;m concerned. Please inform me if I am just a dumb girl front end developer, and that that must be why I think front end dev is a nontrivial task.&lt;/p&gt;
&lt;p&gt;Bonus point, made to me: &amp;quot;If you don&#39;t want to work at a place that doesn&#39;t like women, isn&#39;t the best way to weed them out...to be a woman?&amp;quot; Touch√©.&lt;/p&gt;
&lt;p&gt;**Please excuse my use of terms like &amp;quot;obviously&amp;quot; in regards to gender expression. I know it is not black and white, and I generally try not to engage in binary, traditional gender-appearance assumptions. I hope their relevance in this case is understood, and please feel free to let me know via whatever means you please (if you&#39;re looking for a way, &lt;a href=&quot;https://twitter.com/hboo_codes&quot;&gt;Twitter&lt;/a&gt; or perhaps a &lt;a href=&quot;https://github.com/heatherbooker/blog/issues&quot;&gt;Github issue&lt;/a&gt; could be good.) if you disagree with or take issue with anything I said.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Things that seem like they happen in jobs but never in job interviews</title>
		<link href="https://hboo.ca/blog/posts/2017-03-08-things-that-seem-like-they-happen-in-jobs-but-never-in-job-interviews/"/>
		<updated>2017-03-08T00:00:00Z</updated>
		<id>https://hboo.ca/blog/posts/2017-03-08-things-that-seem-like-they-happen-in-jobs-but-never-in-job-interviews/</id>
		<content type="html">&lt;p&gt;Maybe it&#39;s just because I&#39;ve been setting up wackloads of dev environments and picking projects, but this whole &lt;em&gt;Prepping for &lt;a href=&quot;https://wiki.gnome.org/Outreachy&quot;&gt;Outreachy&lt;/a&gt;&lt;/em&gt; business is making me think that there&#39;s a lot more to jobs than all these job interviews involving little code challenges get at.  There&#39;s a baloney-ton of:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Talking to people&lt;/li&gt;
&lt;li&gt;Figuring out what to work on&lt;/li&gt;
&lt;li&gt;Stalking channels on IRC&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Nah, actually I guess this stuff is probably pretty specific to my current situation. (The last one was kindof a joke, except it&#39;s definitely true.) I am also spending a ton of time waiting, for:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Tests to run&lt;/li&gt;
&lt;li&gt;Setup scripts to run / Installs + Downloads to finish&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;like sometimes more than an hour. What! Never in my life have I waited so long for anything.* I guess I sortof also wait for&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Answers on how to proceed / Help&lt;/li&gt;
&lt;li&gt;PR approval / Feedback&lt;/li&gt;
&lt;li&gt;Conversations to happen on IRC that I can stealthily glean information from&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Hopefully once I am more involved in the community and more informed about proper processes and procedures, I will feel less of a need to do that last one.&lt;/p&gt;
&lt;p&gt;Anyway, it just feels like I do a lot of &amp;quot;meta&amp;quot; tasks, and less actual &amp;quot;programming&amp;quot; tasks lately. To counter that, I&#39;ve also been trying to throw a few &lt;a href=&quot;https://www.hackerrank.com/heatherbooker&quot;&gt;HackerRanks&lt;/a&gt; in to keep myself sharp. When I can ignore the hair-rip-out-inducing input forms of these HackerRanks, they are pretty fun lil thangs! I remember some people at RC raving about how addicting they are, and now that I spend all day job hunting (sort-of), they certainly are a tasty treat...I can very much see how one might wind up not wanting to walk away.&lt;/p&gt;
&lt;p&gt;Another note - my monitoring of IRC is not good for me. It&#39;s like when online-checkins started at RC; I see what everyone else is doing, and how they&#39;re interacting with others, and I get sad that I&#39;m not doing that. Let&#39;s look at some possible solutions (gee, I hope these fancy new markdown tables I just learned how to build render into HTML (did I use the word &#39;render&#39; gramatically there?)).&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Solution&lt;/th&gt;
&lt;th&gt;Pros&lt;/th&gt;
&lt;th&gt;Cons&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Don&#39;t lurk on IRC.&lt;/td&gt;
&lt;td&gt;Wait, why does this column exist. The pro of all of these is obvi to not get sad.&lt;/td&gt;
&lt;td&gt;FOMO! Miss out on: helping people, seeing other people be helped, gossip, internal decision making, bugs, feature and product discussion&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Participate&lt;/td&gt;
&lt;td&gt;Ah this has a bonus pro of obtaining more information and potentially making contacts!&lt;/td&gt;
&lt;td&gt;May annoy/burden people, takes time, must constantly check because I can&#39;t figure out how to get notified, have to pick 0) channel and 1) topic and 2) words&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;My biggest concern with participating more is that these people already spend a lot of their time managing wannabe contributors and I want to be independent and only ask for help when necessary. At the end of the day, it&#39;s probably just like most things - there is no right answer. Just &lt;em&gt;whatever&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;This post has rambled. I&#39;m out.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;* It is definitely a lie that I have never waited more than an hour for anything. Things I have waited more than an hour for include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Flights (to get on)&lt;/li&gt;
&lt;li&gt;Flights (for other people to get off)&lt;/li&gt;
&lt;li&gt;Bedtime&lt;/li&gt;
&lt;li&gt;Dancing&lt;/li&gt;
&lt;li&gt;Mail&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;However - when I wrote that, I was reminded of the thought that &amp;quot;Never in my life have I worked so hard for anything.&amp;quot;, which is how I feel about programming. This probably deserves to be an article on its own, but it&#39;s a truth - never in my life have I worked so hard for anything as I have to learn to code. This is a fact that continues to awe me. Stay tuned for further notes on this matter.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Xianny&#39;s awesome Jekyll post generator</title>
		<link href="https://hboo.ca/blog/posts/2017-02-28-xiannys-awesome-jekyll-post-generator/"/>
		<updated>2017-02-28T00:00:00Z</updated>
		<id>https://hboo.ca/blog/posts/2017-02-28-xiannys-awesome-jekyll-post-generator/</id>
		<content type="html">&lt;p&gt;Oops, note to self - need to strip special characters such as apostrophes from file names. (Guess how I came up with that one..[1]).&lt;/p&gt;
&lt;p&gt;Having got all this Jekyll stuff finally up and running, I was dying from manually formatting all of my posts and their titles. Seriously, typing out the whole date for every post&#39;s file name?! Terrible. Also, srsly, what kind of programmer am I if I keep doing something manually. What is even the point.&lt;/p&gt;
&lt;p&gt;Unfortunately, shell scripting is &lt;em&gt;not&lt;/em&gt; my forte. It is so confusing. I remember one day at &lt;a href=&quot;https://recurse.com/&quot;&gt;RC&lt;/a&gt;, AJ (teehee, two two-letter acronyms, I am Heather-two-two over here) showed me a couple quick things about it and I was amazed. Then I read &lt;a href=&quot;https://strugee.net/blog/2017/02/rc-week-7&quot;&gt;this blog&lt;/a&gt; post where he talks about&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;how he and Aditya solved a Code Dojo with a bash script (!!!), and how&lt;/li&gt;
&lt;li&gt;Aditya asked about type-casting in bash.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;AJ thought that was funny, because bash doesn&#39;t have a type system. What?! That explains this one problem I couldn&#39;t solve a while back, and why the internet wouldn&#39;t tell me how to coerce a string to a number in my shell script... -_-&lt;/p&gt;
&lt;p&gt;Anyway, you can see this snippet from my (appallingly large collection of) desktop notes that &lt;em&gt;desperately&lt;/em&gt; desires this Jekyll-generating script in my life:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://hboo.ca/blog/img/post-generator-wanted.png&quot; alt=&quot;it has a lot of exclamation points. because i wanted it.&quot; /&gt;&lt;/p&gt;
&lt;p&gt;And then, in checking out the Blaggregator feed (that I finally added myself to! *cue emoji with monkey covering its eyes*), I came upon Xianny&#39;s blog post where she wrote the PERFECT SCRIPT! &lt;s&gt;You should definitely &lt;a href=&quot;http://journal.xianny.com/2017/02/21/autogen-jekyll-new-post.html&quot;&gt;read it&lt;/a&gt;! Go. Right now.&lt;/s&gt; Link is dead! üò¢&lt;/p&gt;
&lt;p&gt;This was beyond perfect. I am so happy right now.&lt;/p&gt;
&lt;p&gt;I made a couple of &lt;a href=&quot;https://gist.github.com/heatherbooker/50672cef429e667270b39c0d19f44fe3&quot;&gt;tweaks&lt;/a&gt;, namely:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;if &lt;code&gt;-d&lt;/code&gt; is passed as a command line option, add &lt;code&gt;draft: true&lt;/code&gt; to the front matter[2] of the post instead of adding it to a _drafts dir.&lt;/li&gt;
&lt;li&gt;make post titles all lowercase in filenames.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This second undertaking involved a very tiny addition, surprisingly.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Before:
# (The - before the $ is not fancy bash shtuff...it&#39;s just a dash.)
TITLE+=&amp;quot;-$word&amp;quot; 
 
# After:
TITLE+=&amp;quot;-${word,,}&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Not bad hunh?! And now all I did to write this post was type &lt;code&gt;./new &amp;quot;Xianny&#39;s awesome Jekyll post generator&amp;quot;&lt;/code&gt;!&lt;/p&gt;
&lt;p&gt;(Also I had to write the rest of the post and screenshot my note, but...ya know, that was CHILD&#39;S PLAY.)&lt;/p&gt;
&lt;p&gt;Thank you Xianny!!&lt;/p&gt;
&lt;p&gt;PS - If I forget to fill in the &lt;code&gt;categories&lt;/code&gt; field in the front matter, this happens:&lt;br /&gt;
&lt;img src=&quot;https://hboo.ca/blog/img/fill-me-in.png&quot; alt=&quot;nonsense categories on the post&quot; /&gt;&lt;br /&gt;
because I set it to do that, so I won&#39;t forget. It&#39;s sorta functional to that end I guess? I am snort-laughing because I tried to help myself but it turns out I am un-helpable.&lt;/p&gt;
&lt;p&gt;PPS - If you don&#39;t use Jekyll, you may not know why I want to strip apostrophes, or what front matter is.&lt;/p&gt;
&lt;p&gt;[1] I want to strip non-alphanumeric chars from titles when they become filenames. I have a feeling they don&#39;t belong there.&lt;br /&gt;
[2] Front matter is this configuration crap that goes at the top of every post. Stuff like the layout, title, categories, etc.&lt;/p&gt;
&lt;p&gt;PPPS - Help, I think I am addicted to writing blog posts.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>How to use Heroku Scheduler with Node.js</title>
		<link href="https://hboo.ca/blog/posts/2017-02-27-how-to-use-heroku-scheduler-with-node/"/>
		<updated>2017-02-27T00:00:00Z</updated>
		<id>https://hboo.ca/blog/posts/2017-02-27-how-to-use-heroku-scheduler-with-node/</id>
		<content type="html">&lt;p&gt;While there are &lt;a href=&quot;http://stackoverflow.com/a/13956024&quot;&gt;multiple&lt;/a&gt; &lt;a href=&quot;http://www.spacjer.com/blog/2014/02/10/defining-node-dot-js-task-for-heroku-scheduler/&quot;&gt;tutorials&lt;/a&gt; out there on using the Heroku Scheduling add-on with Node.js, they all seem to suggest the same strange series of steps. I can&#39;t understand why they all recommend&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;putting your scheduled task in a file without an extension...&lt;/li&gt;
&lt;li&gt;in a directory called &#39;bin&#39;, and...&lt;/li&gt;
&lt;li&gt;executing it without specifying &lt;code&gt;node&lt;/code&gt; in the command, but instead adding &lt;code&gt;#!/path/to/node&lt;/code&gt; to the top of the task file.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I originally didn&#39;t look at any of these tutorials - I guessed from the examples using other languages in the &lt;a href=&quot;https://hboo.ca/blog/posts/2017-02-27-how-to-use-heroku-scheduler-with-node/&quot;&gt;Heroku docs&lt;/a&gt; that I could just write a normal &lt;code&gt;javascriptfile.js&lt;/code&gt; and execute it by running &lt;code&gt;heroku run node javascriptfile.js&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;However, Heroku also asserts that you should be able to test your task by running &lt;code&gt;heroku run my task&lt;/code&gt; locally, but every time I tried this, it would fail with the following error:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Wait, hold on just one cott&#39;n pickin&#39; secon&#39;. I just went to run it so I could dutifully copy the &lt;em&gt;exact&lt;/em&gt; error message for y&#39;all, and it ran WITHOUT GLITCHES. wAT?!??&lt;/p&gt;
&lt;p&gt;Well. My only proposed explanation is that all the times I ran this in the past, I either&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;hadn&#39;t added, committed, and pushed the file to Heroku, or&lt;/li&gt;
&lt;li&gt;hadn&#39;t waited long enough after adding, committing, and pushing to Heroku for it to be available.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Idk if that last one makes any sense. But I swear it has to be something like that, because after reading a tutorial that (said I should be able to do it the way I &lt;a href=&quot;http://www.modeo.co/blog/2015/1/8/heroku-scheduler-with-nodejs-tutorial&quot;&gt;was doing it&lt;/a&gt;, plus) specified adding and committing and pushing the file before trying to &lt;code&gt;heroku run&lt;/code&gt; it, I definitely made sure I had done that.&lt;/p&gt;
&lt;p&gt;Anyway, where I &lt;em&gt;was&lt;/em&gt; going with this was to say that it kept claiming it couldn&#39;t find the &lt;code&gt;javascriptfile.js&lt;/code&gt; that I was telling it to run. Because my task wouldn&#39;t necessarily output anything every time it ran, I simply added an extra line  so it would email me every time the file was executed. I also added a similar line to the sibling file that I had copied into the /bin dir and removed the .js from and added the path/to/node to, plus a comment telling me which was which.&lt;/p&gt;
&lt;p&gt;My Heroku scheduled tasks now looked like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://hboo.ca/blog/img/heroku-scheduler.png&quot; alt=&quot;&#39;node task.js&#39; and &#39;task&#39;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;I gratefully soon received an email from my task! It was from the file I had originally included - the one that made structural sense to me. Phew. Maybe I do understand things after all.&lt;/p&gt;
&lt;p&gt;Now I wait to see if the other file will also send me an email! I hope the suspense doesn&#39;t kill me. If it doesn&#39;t, I&#39;ll just delete it. If it does, I&#39;ll delete it anyway.* Teehee - it&#39;s all for &lt;strong&gt;science&lt;/strong&gt;!&lt;/p&gt;
&lt;p&gt;* I&#39;ll delete it anyway because I don&#39;t need two files for one task, and I wanna keep the one I came up with all on my own! &lt;img src=&quot;https://hboo.ca/blog/img/heart-emoji.png&quot; alt=&quot;heart eyes face&quot; /&gt;&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Oh god Vim is broken</title>
		<link href="https://hboo.ca/blog/posts/2017-02-24-oh-god-vim-is-broken/"/>
		<updated>2017-02-24T00:00:00Z</updated>
		<id>https://hboo.ca/blog/posts/2017-02-24-oh-god-vim-is-broken/</id>
		<content type="html">&lt;p&gt;I tried to start writing another post but vim is back to its old habits of appearing to insert weeeeeiiiiiird characters as I type.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://hboo.ca/blog/img/vim-is-corrupt.png&quot; alt=&quot;weird stuff happening here. boxes with 0s and 1s and Bs, and qs and 6s.&quot; /&gt;&lt;/p&gt;
&lt;p&gt;It does this from time to time...I must have messed with some config somewhere. Anyway, PLZ HALP, AM NEED HALP.&lt;/p&gt;
&lt;p&gt;I believe it has to do with the character encoding or colours for my shell or something. I am also suspicious that it might have happened when I uninstalled jedi-vim.&lt;/p&gt;
&lt;p&gt;It&#39;s funny because the other day I was typing and I hardly noticed the weird visual corruption, which made me think of when Rose at RC  said  having a Linux system hasn&#39;t led to an improvement in her ability to solve problems with the OS; instead, her tolerance for living with things being screwed up has increased. I think that is definitely sometimes true. I will go through phases of tolerating-to-the-point-of-not-noticing glaring flaws in my setup, and then desparately trying to fix whatever it is. This has included:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;when I broke my Windows partition&lt;/li&gt;
&lt;li&gt;my computer freezing when plugged into an external display&lt;/li&gt;
&lt;li&gt;the mouse being clicked randomly all over the screen whenever the laptop lid was closed&lt;/li&gt;
&lt;li&gt;so many things with vim&lt;/li&gt;
&lt;li&gt;I don&#39;t even know&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It&#39;s an interesting life. I like the challenges that come along with using Linux. Without them, there are 1001 things I would never have learned. Maybe closer to 1,000,001 things.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>What is route protection?</title>
		<link href="https://hboo.ca/blog/posts/2017-02-23-what-is-route-protection/"/>
		<updated>2017-02-23T00:00:00Z</updated>
		<id>https://hboo.ca/blog/posts/2017-02-23-what-is-route-protection/</id>
		<content type="html">&lt;p&gt;When I searched this, I found a lot of mentions of Laravel and PHP. Whaat? What is this Laravel? And I certainly don‚Äôt want to start getting involved with PHP. Surely there is a simpler explanation for this!&lt;/p&gt;
&lt;p&gt;Well, now there is! Right here. On your very own screen.&lt;/p&gt;
&lt;p&gt;‚ÄúRoute protection‚Äù is a term referring to the idea that not all users should be able to access all parts of your app. These parts of your app are (theoretically) accessible at various &lt;em&gt;routes&lt;/em&gt; or &lt;em&gt;URLs&lt;/em&gt;. For example, perhaps users who are not logged in should be denied access to &lt;a href=&quot;http://somewebsite.com/fancystuffyouhadtopayfor&quot;&gt;somewebsite.com/fancystuffyouhadtopayfor&lt;/a&gt;. Therefore, you may wish to either use a service/plugin, or add some simple logic to your app to &amp;quot;protect&amp;quot; any private or restricted routes.&lt;/p&gt;
&lt;p&gt;I was so confuseded when someone said I should use &amp;quot;route protection&amp;quot;; I guess it&#39;s just one of those things that are so obvious to the people who know it that they don&#39;t see it as worth explaining.&lt;/p&gt;
&lt;p&gt;Also, I started writing this post many months ago. I should have just finished it when I started it! Anyway, here it is now. I hope it helps.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Day Whatever @ RC</title>
		<link href="https://hboo.ca/blog/posts/2017-01-24-day-whatever/"/>
		<updated>2017-01-24T00:00:00Z</updated>
		<id>https://hboo.ca/blog/posts/2017-01-24-day-whatever/</id>
		<content type="html">&lt;p&gt;&lt;strong&gt;What am I doing?&lt;/strong&gt;&lt;br /&gt;
I&#39;m waiting for git to finish cloning Mozilla&#39;s Bedrock repo.&lt;br /&gt;
&lt;strong&gt;Why?&lt;/strong&gt;&lt;br /&gt;
So I can set up a dev environment to contribute to Mozilla.&lt;br /&gt;
&lt;strong&gt;Why?&lt;/strong&gt;&lt;br /&gt;
So I can get my first bug fix in and give back to FOSS (Free Open Source Software)!!&lt;br /&gt;
&lt;strong&gt;Why?&lt;/strong&gt;&lt;br /&gt;
So I can work with Mozilla in the Outreachy project! ‚ù§Ô∏è&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Thoughts&lt;/strong&gt;&lt;br /&gt;
Following along with their docs on setting up the dev environment is amazing! But of course I have just one suggestion...they say&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you are on Linux, you will need at least the following packages or their equivalent for your distro:&lt;br /&gt;
python-dev libxslt-dev&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Now, in particular because one of them starts with &#39;python&#39;, I tried to &lt;code&gt;pip install&lt;/code&gt; both of them. Eventually I realized they needed to be &lt;code&gt;apt-get install&lt;/code&gt;ed instead. Whoops.&lt;br /&gt;
But maybe people who can&#39;t realize that by themselves will struggle even more to actually contribute to the code base...so maybe it&#39;s an early test. I passed!&lt;/p&gt;
&lt;p&gt;GAH&lt;br /&gt;
The tests for some reason don&#39;t all pass! So I ran them one by one until I found a culprit - bedrock/newsletter. I don&#39;t know what that means or if it&#39;ll be helpful, but I feel like I made progress so that&#39;s cool.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>How to use Sails.js with¬†Pug</title>
		<link href="https://hboo.ca/blog/posts/2017-01-07-how-to-use-sails-with-pug/"/>
		<updated>2017-01-07T00:00:00Z</updated>
		<id>https://hboo.ca/blog/posts/2017-01-07-how-to-use-sails-with-pug/</id>
		<content type="html">&lt;p&gt;You may know by now that I like to make &lt;a href=&quot;https://hboo.ca/blog/posts/2016-08-24-how-to-vue-directive-npm&quot;&gt;tutorials for things with dismal search results&lt;/a&gt;, and this is no different. The search results when I queried for the title of this post included the following:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://hboo.ca/blog/img/use-sails-with-pug.png&quot; alt=&quot;pugs on sailboats. not the sails or pugs I wanted.&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Yeah. Not exactly what I was looking for. So I started by following &lt;a href=&quot;https://www.youtube.com/watch?v=ep6EQ5f82Ts&amp;amp;list=PLf8i4fc0zJBzLhOe6FwHpGhBDgqwInJWZ&amp;amp;index=3&quot;&gt;a video tutorial&lt;/a&gt; (just kidding, actually I started by blindly trying to merge the basic sails app with my pre-existing code, which was painfully unsuccessful) to the T just to get an idea of how sails works, seeing as I‚Äôm still more than a little confused about routing and http and servers and databases. I shall now extrapolate the process of converting this project to use pug, to a tutorial on starting a sails app with pug.&lt;/p&gt;
&lt;p&gt;Normally you would be able to generate a project using a different templating engine than the default EJS, but it seems the name transition from Jade ‚Üí Pug is not complete. The closest we can get (until &lt;a href=&quot;https://www.npmjs.com/package/sails-generate-views-pug&quot;&gt;the Pug views generator&lt;/a&gt; is published‚Ä¶) (&lt;strong&gt;Update: it‚Äôs a thing!&lt;/strong&gt;) is to run&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;sails new puggity-project --template&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;jade&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;in the terminal to make a new sails project called ‚Äòpuggity-project‚Äô. Be sure that you have sails installed globally before trying to run this command‚Ää‚Äî‚Ääyou can do that using the following command (also in the terminal)¬†:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; sails -g&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You may need to preface the command with ‚Äòsudo‚Äô if this command spits back a bunch of mumblebump about permissions.&lt;/p&gt;
&lt;p&gt;Now we need to change all of the Jade config to Pug, including changing filename extensions in /view to¬†.pug, installing pug, and changing the view engine.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;cd&lt;/span&gt; puggity-project/views&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token for-or-select variable&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; *.jade&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;mv&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$file&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;basename&lt;/span&gt; $file .jade&lt;span class=&quot;token variable&quot;&gt;`&lt;/span&gt;&lt;/span&gt;.pug&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;done&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; i --save pug&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Open config/views.js and change the line that says &lt;strong&gt;engine: ‚Äújade‚Äù&lt;/strong&gt; to say &lt;strong&gt;engine: ‚Äúpug‚Äù&lt;/strong&gt;.&lt;br /&gt;
You should now be able to run&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;sails lift&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; start&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(whichever you prefer‚Ää‚Äî‚Ää‚Äúsails lift‚Äù is their cute start command but for consistency if you work with other npm projects, you might appreciate using ‚Äúnpm start‚Äù.)&lt;br /&gt;
From this point you can basically follow &lt;a href=&quot;https://www.npmjs.com/package/sails-generate-views-pug&quot;&gt;this tutorial I linked above&lt;/a&gt;, being mindful that when the EJS is mentioned, you will need to take the appropriate action but using Pug syntax/files.&lt;/p&gt;
&lt;p&gt;Some little notes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In new¬†.pug files, you will need to start with&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&quot;language-pug&quot;&gt;&lt;code class=&quot;language-pug&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;extends ../layout&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;block body&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;For ep.3: watch the updated version (which is later in the playlist)&lt;/li&gt;
&lt;li&gt;In ep.3: the &lt;code&gt;sails generate user&lt;/code&gt; command is going to need to be &lt;code&gt;sails generate api user&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;After running running &lt;code&gt;sails generate api user&lt;/code&gt;, you may need to go into config/models.js and set uncomment the ‚Äúmigrate‚Äù line (I also changed it to &lt;code&gt;migrate: ‚Äòsafe‚Äô &lt;/code&gt;, because I like the sound of ‚Äúsafe‚Äù!) to avoid command line error msgs&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In episode 3, you create a form with one input as follows:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;input type=‚Äúhidden‚Äù name=&quot;_csrf&quot; value=‚Äú&amp;lt;%= _csrf %&gt;&quot; &gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, the &amp;lt;%¬†‚Ä¶ %&amp;gt; syntax is specific to EJS templates; we need to puglify it! (Not uglify‚Ä¶pug syntax is definitely prettier to my eyes!) Our version will look like this:&lt;/p&gt;
&lt;pre class=&quot;language-pug&quot;&gt;&lt;code class=&quot;language-pug&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;input&lt;span class=&quot;token attributes&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token attr-name&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&quot;hidden&quot;&lt;/span&gt; name&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;_csrf&quot;&lt;/span&gt; value&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; _csrf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Voila! C‚Äôest beautiful.&lt;/p&gt;
&lt;p&gt;Then in episode 5, you get into making variables available to your views, which you can read more about in the locals documentation of Sails. They can then be accessed in the Pug-typical way (as seen above for the input ‚Äúvalue‚Äù attribute), by appending an equals sign, a space, and the variable name to either an attribute or a tag.&lt;/p&gt;
&lt;p&gt;There you go! I hope this helps you get started whipping up a Sails.js + Pug app. If you need more inspiration or to see some code, check out my sails + pug project code or the app itself! Good luck and have fun!¬†üòÉ&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: This post was migrated from its &lt;a href=&quot;https://medium.com/@heatherbooker/how-to-use-sails-js-with-pug-d3ded437c895#.drv7vifry&quot;&gt;original home on Medium&lt;/a&gt; on February 23, 2017.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Day 11 (or 8) @ RC</title>
		<link href="https://hboo.ca/blog/posts/2016-11-16-where-am-i/"/>
		<updated>2016-11-16T00:00:00Z</updated>
		<id>https://hboo.ca/blog/posts/2016-11-16-where-am-i/</id>
		<content type="html">&lt;p&gt;This post was originally labelled &amp;quot;Where am I&amp;quot;.&lt;br /&gt;
I&#39;m not entirely sure whether I should count Monday to Fridays, or weekends too - weekends too I guess, since Fridays themselves aren&#39;t even techically normal work days.&lt;/p&gt;
&lt;p&gt;Day 11 it is then.&lt;br /&gt;
Here&#39;s some things I have been doing:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;socializing&lt;/li&gt;
&lt;li&gt;helping people debug&lt;/li&gt;
&lt;li&gt;getting help debugging&lt;/li&gt;
&lt;li&gt;pairing to solve little puzzles&lt;/li&gt;
&lt;li&gt;eating&lt;/li&gt;
&lt;li&gt;walking&lt;/li&gt;
&lt;li&gt;reading Zulip (internal chat system)&lt;/li&gt;
&lt;li&gt;solving Nand to Tetris projects&lt;/li&gt;
&lt;li&gt;jumping around spastically from project to project&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So there&#39;s the good and the bad. What did I come here to do? What kinds of things do I want to learn, do, practise, or improve at?&lt;/p&gt;
&lt;p&gt;HARD SKILLS&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;low level comprehension from hardware to OSes&lt;/li&gt;
&lt;li&gt;using debugging tools for Javascript&lt;/li&gt;
&lt;li&gt;knowledge of algorithms, big O complexity, data structures&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;SOFT SKILLS&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;reading other people&#39;s code and knowing what&#39;s going on&lt;/li&gt;
&lt;li&gt;giving and taking programming instructions verbally&lt;/li&gt;
&lt;li&gt;being confident in my abilities&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;My big project is to build an interactive-web-app-guide-follow-along that assists other people who want to work through the &lt;em&gt;Nand to Tetris&lt;/em&gt; &lt;a href=&quot;http://www.nand2tetris.org/&quot;&gt;course&lt;/a&gt; and/or accompanying book, &lt;em&gt;The elements of Computing Systems&lt;/em&gt;. I have been extremely lucky to have a group of people here with whom I can talk about and solve problems, but if I hadn&#39;t, I highly doubt that I would have stuck with it. I am also aware of many others who wish they could be/have been part of such a group, and David Branner in particular suggested that a guide would be wonderful. James suggested putting it in interactive web app form, which was perfect timing because I just watched an &lt;a href=&quot;https://www.youtube.com/watch?v=8aGhZQkoFbQ&quot;&gt;awesome animated explanation of the javascript event loop in browsers&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I am holing myself away in a room in an attempt to focus better. Result: focusing excellently on writing this blog post. Nice try. -_-&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Day 3 @ RC</title>
		<link href="https://hboo.ca/blog/posts/2016-11-09-day-3/"/>
		<updated>2016-11-09T00:00:00Z</updated>
		<id>https://hboo.ca/blog/posts/2016-11-09-day-3/</id>
		<content type="html">&lt;p&gt;TO DO:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ask Michelle about Markov chains&lt;/li&gt;
&lt;/ul&gt;
</content>
	</entry>
	
	<entry>
		<title>Day 2 @ RC</title>
		<link href="https://hboo.ca/blog/posts/2016-11-08-day-2/"/>
		<updated>2016-11-08T00:00:00Z</updated>
		<id>https://hboo.ca/blog/posts/2016-11-08-day-2/</id>
		<content type="html">&lt;p&gt;&lt;strong&gt;My Computer&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Su helped me fix my Windows partition!! Holy smokes! She is a magician!! ‚ù§Ô∏è&lt;br /&gt;
I should definitely have been able to do it myself - we just reset the whole thing. But it was fun to not have Windows for a while and just live that way. Because whatever.&lt;/p&gt;
&lt;p&gt;Also, my poor boring new computer has some new digs - Stanley was sharing some of his long-collected stickers! So I have the git logo, the github octocat, and a fancy octocat from their culturally diverse collection. Wow I should totally not be writing this o.o .&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Nand to tetris&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I started reading the associated book and it really kind of stinks. It&#39;s hard. It&#39;s super not fun. I have no idea what they&#39;re saying.&lt;br /&gt;
Then I was accidentally sitting in a checkin room and Michelle came in so I told her what was up and she told me to find a logic gate sandbox online and mess around. So I read &lt;a href=&quot;http://whatis.techtarget.com/definition/logic-gate-AND-OR-XOR-NOT-NAND-NOR-and-XNOR&quot;&gt;this&lt;/a&gt; and used my brain and played &lt;a href=&quot;http://www.neuroproductions.be/logic-lab/&quot;&gt;here&lt;/a&gt; and it&#39;s much more fun and more satisfying.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Veggiematarian&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Everyone is so encouraging and helpful. They have all these suggestions of what I can eat that is cheap and veg. I love it. It&#39;s amazing.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;I helped a person do a thing!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I was totally just a rubber duck. The problem was totally something I do all the time. It was having an incorrect file path. Love it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Stuff that was interesting that I wasn&#39;t actually involved in&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Listening to James help Veronica set up her dev environment.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;To Do:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;build a tool that automatically RSVPs me to every event on Zulip, adds it to my google calendar, and then tells me I&#39;m going&lt;/li&gt;
&lt;li&gt;build my tesselating youtube video text-in-image processing tool&lt;/li&gt;
&lt;li&gt;write hand pricking web app using unhosted&lt;/li&gt;
&lt;/ul&gt;
</content>
	</entry>
	
	<entry>
		<title>RC: Day -2</title>
		<link href="https://hboo.ca/blog/posts/2016-11-05-day-negative-2/"/>
		<updated>2016-11-05T00:00:00Z</updated>
		<id>https://hboo.ca/blog/posts/2016-11-05-day-negative-2/</id>
		<content type="html">&lt;p&gt;Today is the day before the day before I will begin a series of days at &lt;a href=&quot;https://recurse.com/&quot;&gt;the Recurse Center&lt;/a&gt;. I have two reasons for writing this‚Ää‚Äî‚ÄäOne, they suggest keeping a blog to track your learning etc., but even before that, I read a few blogs from people who went to RC and did just that, like &lt;a href=&quot;https://jvns.ca/blog/2013/09/26/hacker-school-day-4-c-unit-testing/&quot;&gt;Julia Evans&lt;/a&gt;. It was really cool to see what they were doing, and I kindof want a place to organize my thoughts.&lt;/p&gt;
&lt;p&gt;I was looking at some job postings and a surprising number of them mentioned ‚ÄòScala‚Äô. I don‚Äôt even know what category of language Scala is. Also, a lot of them were data science or machine learning based; or maybe it just seems disproportionately that way because they are ‚Äúoff-limits‚Äù to me. I would love to dive into some of that stuff, machine learning and AI in particular, but I don‚Äôt see 3 months being quite sufficient to really get very far.&lt;/p&gt;
&lt;p&gt;To Do:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;look at Scala&lt;/li&gt;
&lt;li&gt;forget about whether learning X will help me get a job&lt;/li&gt;
&lt;li&gt;put up No-Frills API so I can start on Nand-to-Tetris on Monday&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: This post was migrated from its &lt;a href=&quot;https://medium.com/@heatherbooker/rc-day-2-632e910b7c17#.r6xkbrdyw&quot;&gt;original home on Medium&lt;/a&gt; on February 23, 2017.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>How to publish an Vue.js directive to¬†npm</title>
		<link href="https://hboo.ca/blog/posts/2016-08-24-how-to-vue-directive-npm/"/>
		<updated>2016-08-24T00:00:00Z</updated>
		<id>https://hboo.ca/blog/posts/2016-08-24-how-to-vue-directive-npm/</id>
		<content type="html">&lt;p&gt;Wow, so I‚Äôm always amazed when something I want to know how to do doesn‚Äôt stare right back at me in the top 5 Google results. I‚Äôm sure you can guess why I am writing this article today (hint: check the title), but be assured that I have previously been unsuccessful in my mission to publish my Vue.js directive to npm. Please join me for a thrilling recount of my journey to enlightenment.&lt;/p&gt;
&lt;p&gt;So the original version of &lt;a href=&quot;https://github.com/heatherbooker/vue-sticky-scroll&quot;&gt;my directive&lt;/a&gt; just had&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;Vue&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;directive&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;name-of-directive&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// Definition&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Stupidly simple. Perfectamundo. Works great when you just drag the file in, either by cloning/downloading or using a &lt;a href=&quot;https://rawgit.com/&quot;&gt;CDN&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;But it isn‚Äôt enough to make this work as an npm package. (I know because I tried it.) For that, we will need to sleuth a little more‚Ää‚Äî‚ÄäI did this by investigating a bunch of &lt;a href=&quot;https://www.npmjs.com/search?q=vue+directive&quot;&gt;other people‚Äôs directives&lt;/a&gt; that were already available through npm. I think I must have sleuthed &lt;em&gt;too&lt;/em&gt; hard the first time, because it turns out that making a Vue directive work as an npm package is also pretty stupidly simple.&lt;/p&gt;
&lt;p&gt;It can be done by essentially the same principle as making anything else available both through npm and a non-node environment (such as a CDN or direct use of the file), which is as follows:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Before you create your Vue.directive:&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; Vue &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;vue&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// It&#39;s all good, Vue should already be available globally.&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// Then create your Vue.directive as a variable:&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; myDirective &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Vue&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;directive&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// Finally, check if you should export it:&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exports &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; myDirective&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// No problem, it should be registered as is.&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The try/catch clauses could also be &lt;code&gt;if&lt;/code&gt; statements, where you check the environment before doing what needs to be done:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;typeof&lt;/span&gt; module &lt;span class=&quot;token operator&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;undefined&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;module &lt;span class=&quot;token operator&quot;&gt;!==&lt;/span&gt; module &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exports&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; Vue &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;vue&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// Continue as above, replacing final &#39;try/catch&#39; with above &#39;if&#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But there is some discourse on the best way to do this‚Ää‚Äî‚Ääwhether checking the first and last clauses is sufficient (&lt;a href=&quot;http://underscorejs.org/docs/underscore.html#section-11&quot;&gt;Underscore&lt;/a&gt; does it this way) or the first and second clauses are a preferable pair. Let me know if you have thoughts on the &lt;code&gt;try/catch&lt;/code&gt; vs &lt;code&gt;if (module)&lt;/code&gt; dilemma.&lt;/p&gt;
&lt;p&gt;Of course, everything should be wrapped in an anonymous, self-invoking function to prevent bloating of the global namespace if users are not using node.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// Do all the things;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In any case, either of the above should be sufficient to make your directive available through both platforms. Now all you have to do is npm publish!&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: This post was migrated from its &lt;a href=&quot;https://medium.com/@heatherbooker/how-to-publish-an-vue-js-directive-to-npm-e98600fb5d2f#.ngsetlhae&quot;&gt;original home on Medium&lt;/a&gt; on February 23, 2017.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>How to make a reusable ‚Äúdirective‚Äù in Vue.js</title>
		<link href="https://hboo.ca/blog/posts/2016-08-12-how-to-vue-directive/"/>
		<updated>2016-08-12T00:00:00Z</updated>
		<id>https://hboo.ca/blog/posts/2016-08-12-how-to-vue-directive/</id>
		<content type="html">&lt;p&gt;I like Vue.js. A lot. (See my &lt;a href=&quot;https://hboo.ca/blog/posts/2016-06-15-vue-vs-react&quot;&gt;comparison with React.js here&lt;/a&gt;.) It is a beautifully simple, straightforward, and superbly functional view-layer framework. I‚Äôve gone over most of the docs multiple times, and I am absolutely enamoured with the clarity they exude. They don‚Äôt use stupidly obscure words or send you around in circles trying to find what you want. They make you and Vue Just Work.&lt;/p&gt;
&lt;p&gt;However, I had a weak spot‚Ää‚Äî‚Ääthe ‚ÄúCustom Directives‚Äù page. I avoided it for the longest time. Not being familiar with Angular (which everyone else seemed to be comparing these ‚Äúdirectives‚Äù to those ‚Äúdirectives‚Äù), I did not understand what a ‚Äúdirective‚Äù was or why I might want to use it. I couldn‚Äôt find a page explicitly labelled ‚ÄúNormal Directives‚Äù so I decided these custom ‚Äúdirectives‚Äù were probably super insanely advanced.&lt;/p&gt;
&lt;p&gt;Anyway, as it turns out, smack dab on the &lt;a href=&quot;https://vuejs.org/guide/overview.html&quot;&gt;Vue.js overview&lt;/a&gt; page is a succinct introduction to ‚Äúdirectives‚Äù:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Directives are prefixed with v- to indicate that they are special attributes provided by Vue.js, and as you may have guessed, they apply special reactive behavior to the rendered DOM.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Yup, that is right out of the docs. Apparently it was &lt;em&gt;too&lt;/em&gt; succinct for me. If any of you are like me, let me see if I can break down what a ‚Äúdirective‚Äù is even more.&lt;/p&gt;
&lt;p&gt;‚ÄúDirectives‚Äù in Vue.js are handy little tools or services that &lt;em&gt;do something&lt;/em&gt; to a component. Simply by adding ‚Äúv-your-directive-name‚Äù as an attribute (like ‚Äúclass‚Äù or ‚Äúv-bind:whatever‚Äù or ‚Äústyle‚Äù are all attributes) in your markup as follows ‚Äî&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;v-some-directive&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;BLAh blaH BLAH or whatever&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;‚Äî you will find that this div now has whatever behaviour the directive specifies.&lt;br /&gt;
But what is the difference between:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a directive and a component?&lt;br /&gt;
See, a component &lt;em&gt;is&lt;/em&gt; a thing. A directive &lt;em&gt;does&lt;/em&gt; a thing.&lt;br /&gt;
Clear as mud? Good. (We‚Äôll get to an example soon.)&lt;br /&gt;
What about the difference between:&lt;br /&gt;
-a directive and a plugin?&lt;br /&gt;
Wait, what &lt;em&gt;is&lt;/em&gt; the difference between a directive and a plugin?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Well, on this distinction, I admit I really &lt;em&gt;am&lt;/em&gt; seeing it clear as mud. It seems that a directive can be, or become, a plugin. Or is it that plugins can be encapsulated in directives? Perhaps if I end up needing to make a plugin, then my comprehension will be strengthened. Please do let me know if you are wiser than I on this topic.&lt;/p&gt;
&lt;p&gt;Anyway, now that I‚Äôve bored you to death with the blabbing, let‚Äôs dig right in and see a useful example of a custom directive. &lt;a href=&quot;https://github.com/heatherbooker/vue-sticky-scroll&quot;&gt;Check out the code on Github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I created a directive (as all great things are created) out of necessity: I wanted a div of a fixed height to always auto-scroll down to the bottom if new content is added. A common problem you would think, no? Various attempts at solutions took hours upon hours‚Ää‚Äî‚Ääusing libraries, requestAnimationFrame, home-hacked fixes, until I was satisfied. Then someone pointed out the excellent browser feature, Mutation Observers. This was an infinitely simpler implementation of the behaviour I desired.&lt;/p&gt;
&lt;p&gt;(If what you are really after is how to solve this same problem, I wrote about the exact implementation &lt;a href=&quot;https://hboo.ca/blog/posts/2016-08-12-how-to-vue-directive/&quot;&gt;here&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;My original directive was not a directive. It was just a function that took the class or id of the div in question as an argument, and used that to attach the behaviour to the element. An Angular.js veteran recommended that I extract this functionality into a directive, so that it would automatically attach to the desired element. What witchcraft is this?! That was my reaction to this push that I needed to finally explore directives.&lt;/p&gt;
&lt;p&gt;Oops, that was definitely not digging right in. That was blabbing.&lt;/p&gt;
&lt;p&gt;Javascript:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;Vue&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;directive&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;sticky-scroll&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function-variable function&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; observer &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;MutationObserver&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;scrollToBottom&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; config &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token literal-property property&quot;&gt;childList&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    observer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;observe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;el&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; config&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;scrollToBottom&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token comment&quot;&gt;// whatever it takes to scroll to the bottom&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Html: (template in your Vue component)&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;v-sticky-scroll&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- new elements will be added here, that&#39;s why we want to scroll!--&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let‚Äôs talk about that.&lt;/p&gt;
&lt;p&gt;The name of the directive is ‚Äòsticky-scroll‚Äô, which must be prefaced with ‚Äòv-‚Äô in your template html. The ‚Äòbind‚Äô method found in the directive is one of three possible: bind, update, and unbind, called respectively when the directive is attached, modified, and detached from an element.&lt;/p&gt;
&lt;p&gt;This.el is one of several properties available through the directive-element interface, and is a direct reference to the element. Other properties can specify additional arguments and parameters to modify the directives activity.&lt;/p&gt;
&lt;p&gt;You can now clearly see the distinction between the mysterious ‚Äúdirective‚Äù and a component: in the JS file for the directive, there is no html markup. Only behaviour. In contrast, our component has markup, to which the directive is applied.&lt;/p&gt;
&lt;p&gt;Finally, I want to talk about making your directive reusable and available to the whole of the Vue.js community. Sharing is caring, as they say, and Vue.js is currently maintained by essentially one person. This incredible feat merits some serious love, and contributing useful features and stuff you create is a great way to spread the love. Some tips for doing this in the most awesome way possible:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For maximum simplicity, use a CDN like &lt;a href=&quot;https://rawgit.com/&quot;&gt;RawGit&lt;/a&gt;‚Ää‚Äî‚Ääyou can just upload your single directive file to Github and make it available through a CDN&lt;/li&gt;
&lt;li&gt;Make sure your code is clean and readable‚Ää‚Äî‚Ääusers might have problems or want to modify your source code. // Comments can‚Äôt hurt.&lt;/li&gt;
&lt;li&gt;Throw in a &lt;a href=&quot;http://readme.md/&quot;&gt;readme.md&lt;/a&gt; with a description and usage instructions, and an example preferably&lt;/li&gt;
&lt;li&gt;Then, submit a PR with your shiny new directive to &lt;a href=&quot;https://github.com/vuejs/awesome-vue&quot;&gt;Awesome Vue&lt;/a&gt; for the world to see!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: This post was migrated from its &lt;a href=&quot;https://medium.com/@heatherbooker/how-to-make-a-reusable-directive-in-vue-js-b28e1dfd76a3#.bt5ya37q2&quot;&gt;original home on Medium&lt;/a&gt; on February 23, 2017.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>How to auto-scroll to the bottom of a div</title>
		<link href="https://hboo.ca/blog/posts/2016-08-12-how-to-autoscroll/"/>
		<updated>2016-08-12T00:00:00Z</updated>
		<id>https://hboo.ca/blog/posts/2016-08-12-how-to-autoscroll/</id>
		<content type="html">&lt;p&gt;This article is just going to be a little nublet of an article. Or a nugget. Whatever.&lt;br /&gt;
I found it ridiculously difficult to add what I thought was a common, simple feature to a web app: the ability for a div to automatically scroll to the bottom whenever new content is added. I didn‚Äôt want the page to scroll, and I didn‚Äôt want the div height to grow, or the content to expand outside the div.&lt;/p&gt;
&lt;p&gt;I tried using a library which is supposed to provide this functionality, but I was having no luck. It would sometimes jump around for the first couple of additions, but was terribly inconsistent, and I couldn‚Äôt understand the source code well enough to tweak and make it work.&lt;/p&gt;
&lt;p&gt;Next, I did it the hard way myself‚Ää‚Äî‚Ääby following a summary of how to accomplish it with some sample code using requestAnimationFrame. This was an excellent way to learn more about requestAnimationFrame, which was something I wanted to do anyway. It also eventually worked and solved my problem! Rad.&lt;/p&gt;
&lt;p&gt;But get this‚Ää‚Äî‚Ääit turns out there‚Äôs a better way. Introducing the under-appreciated Mutation Observer. Check it out:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Get a reference to the div you want to auto-scroll.&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; someElement &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;.className&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// Create an observer and pass it a callback.&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; observer &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;MutationObserver&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;scrollToBottom&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// Tell it to look for new children that will change the height.&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; config &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token literal-property property&quot;&gt;childList&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;observer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;observe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;someElement&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; config&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;MutationObservers are available in your browser. &lt;em&gt;In your browser!&lt;/em&gt; They‚Äôre not some fancy shtuff. Well, they are fancy shtuff, but you don‚Äôt have to worry about how they got so fancy, which is what counts in my books.&lt;/p&gt;
&lt;p&gt;Now, that‚Äôs all well and good, but how do you do the actual scrolling?!&lt;/p&gt;
&lt;p&gt;Two options: jump or smooth scroll.&lt;/p&gt;
&lt;p&gt;Jump:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;scrollToBottom&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  someElement&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;scrollTop &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; someElement&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;scrollHeight&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Smooth Scroll:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// First, define a helper function.&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;animateScroll&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;duration&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; start &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; someElement&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;scrollTop&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; end &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; someElement&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;scrollHeight&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; change &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; end &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; start&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; increment &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;easeInOut&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;currentTime&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; start&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; change&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; duration&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// by Robert Penner&lt;/span&gt;&lt;br /&gt;    currentTime &lt;span class=&quot;token operator&quot;&gt;/=&lt;/span&gt; duration &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;currentTime &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; change &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; currentTime &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; currentTime &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; start&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    currentTime &lt;span class=&quot;token operator&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;change &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;currentTime &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;currentTime &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; start&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;animate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;elapsedTime&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    elapsedTime &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; increment&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; position &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;easeInOut&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;elapsedTime&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; start&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; change&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; duration&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    someElement&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;scrollTop &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; position&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;elapsedTime &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; duration&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token function&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token function&quot;&gt;animate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;elapsedTime&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; increment&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;animate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// Here&#39;s our main callback function we passed to the observer&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;scrollToBottom&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; duration &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;300&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Or however many milliseconds you want to scroll to last&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;animateScroll&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;duration&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I hope this helps you. If you‚Äôre using Vue.js, you can check out &lt;a href=&quot;https://github.com/heatherbooker/vue-sticky-scroll&quot;&gt;vue-sticky-scroll&lt;/a&gt; (alternate name: vue-glue?), a directive I published to simplify the lives of other people who also want what I wanted. I also wrote recently about the &lt;a href=&quot;https://hboo.ca/blog/posts/2016-08-12-how-to-vue-directive&quot;&gt;making of Vue.js directives&lt;/a&gt; in general. Recently being like 20 minutes ago. Woohoo for Vue.js!&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: This post was migrated from its &lt;a href=&quot;https://medium.com/@heatherbooker/how-to-auto-scroll-to-the-bottom-of-a-div-415e967e7a24#.etorqdgbe&quot;&gt;original home on Medium&lt;/a&gt; on February 23, 2017.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>How to make an interactive map in React</title>
		<link href="https://hboo.ca/blog/posts/2016-06-21-interactive-react-map/"/>
		<updated>2016-06-21T00:00:00Z</updated>
		<id>https://hboo.ca/blog/posts/2016-06-21-interactive-react-map/</id>
		<content type="html">&lt;p&gt;I am going to share with you a great and magnificent secret: the stages of creating a clickable svg map in a React project. Are you ready? You might want to take notes, because it is super mind-blowing.&lt;/p&gt;
&lt;p&gt;Wait, first here‚Äôs the map, being clicked on (ooh, ahh):&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://hboo.ca/blog/img/map-being-clicked.gif&quot; alt=&quot;clickable map being clicked&quot; /&gt;&lt;/p&gt;
&lt;p&gt;(And if you just want to skip straight to the good stuff, click &lt;a href=&quot;https://www.npmjs.com/package/react-world-map&quot;&gt;here to get my clickable SVG-based React component world map&lt;/a&gt; on npm!)&lt;/p&gt;
&lt;p&gt;If you are ready, let us begin:&lt;/p&gt;
&lt;p&gt;Stages of creating a clickable SVG map in a React project&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Hatred&lt;/li&gt;
&lt;li&gt;Suffering&lt;/li&gt;
&lt;li&gt;Defeat&lt;/li&gt;
&lt;li&gt;Suffering&lt;/li&gt;
&lt;li&gt;Hatred&lt;/li&gt;
&lt;li&gt;Defeat&lt;/li&gt;
&lt;li&gt;Hatred&lt;/li&gt;
&lt;li&gt;Hated&lt;/li&gt;
&lt;li&gt;Utter hatred&lt;/li&gt;
&lt;li&gt;SUCCESS!&lt;/li&gt;
&lt;li&gt;Just kidding. Have you seen this? Because this. (Edit: that link was broken, &lt;a href=&quot;https://s33.postimg.org/niqd2zgwf/code.jpg&quot;&gt;try this&lt;/a&gt;, or failing that, image search ‚Äúhow to do coding‚Äù.)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Hahaha..haha..ha‚Ä¶&lt;em&gt;lying on floor&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;No, but actually. So it was hard. For me. A majority of that, I reckon, is attributable to my lack of experience with various tasks and technologies, such as setting event listeners and using React. However, in the end, I don‚Äôt think I would actually classify it as too difficult a project for the average front-end developer to take on.&lt;/p&gt;
&lt;p&gt;If you are genuinely interested in creating any sort of clickable SVG-based components for your React application, I have compiled the basic steps I ended up taking to complete my map project below. Good luck and have fun!&lt;/p&gt;
&lt;p&gt;When I started out, I had webpack &lt;a href=&quot;https://www.npmjs.com/package/file-loader&quot;&gt;file-loader&lt;/a&gt; set up to handle svgs:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; myImage &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;‚Äò&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;aFile&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;svg‚Äô&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;clickableSvg&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Component&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;token function&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;   &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;img src&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;myImage&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;   &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;\&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(If you‚Äôre not familiar with ‚Äòclass‚Äô or ‚Äòconst‚Äô in js, they are new to ES6.)&lt;/p&gt;
&lt;p&gt;However, embedding the svg file in an &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; tag like this means that any links within the svg code are not valid. [Wait, did I just say svg code? Aren‚Äôt svgs just images? Oh yeah! You can edit svg code‚Ää‚Äî‚Ääit‚Äôs a markup language like HTML, made of &lt;code&gt;&amp;lt;tags&amp;gt;&lt;/code&gt;. Cool.] Sources suggested other options‚Ää‚Äî‚Ääusing an &lt;code&gt;&amp;lt;object&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt; tag instead, or directly embedding the svg code in the document. I wasn‚Äôt keen on the last option, as I felt the svg code for an entire world map was terribly bulky and would make my code messy. I set upon using the iframe tag, in which I could add links around paths/objects, using &lt;code&gt;&amp;lt;a xlink:href=‚Äú#‚Äù&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;But I could go on forever about things that didn‚Äôt work. Let‚Äôs summarize some of the key points to making your clickable svg component work with React:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the svg code must be directly embedded in your React component&lt;/li&gt;
&lt;li&gt;React will not accept any colons (üòÉ or dashes (-) in tag properties‚Ää‚Äî‚Ääyou can convert to camelCase to circumvent this&lt;/li&gt;
&lt;li&gt;links must use the property xlinkHref, not simply href&lt;br /&gt;
you can use event listeners to communicate that a component has been clicked&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(sidenote: I‚Äôm not entirely certain that using event listeners isn‚Äôt a slightly hacky way to accomplish communication between components, but it worked for my purposes of alerting users of the map as an npm module )&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;to change css when a component is clicked, assign it a variable for a className, and then use an onClick to manipulate the className&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;for me, this looked as follows:&lt;/p&gt;
&lt;pre class=&quot;language-svg&quot;&gt;&lt;code class=&quot;language-svg&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;g&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;‚ÄùAF‚Äù&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;{this.mapState.af}&lt;/span&gt; &lt;span class=&quot;token special-attr&quot;&gt;&lt;span class=&quot;token attr-name&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token value javascript language-javascript&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;onMapClick&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;‚Äòaf‚Äô)}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;path&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;path4307&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;M345.902 112.802c-.17.07 ‚Ä¶ &lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;g&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;AF represents Africa, which contained two paths. I grouped the paths in Inkscape (where I could easily view which should go together), then in Sublime I assigned a className. Then I added an onClick to call a function which is defined in the class definition, at the same level as the constructor and render functions.&lt;/p&gt;
&lt;p&gt;The classNames are originally set either in the constructor using this.mapState = {&lt;see code=&quot;&quot; below=&quot;&quot;&gt;} if you are using ES6 classes, or the componentDidMount function if using React.createClass:&lt;/see&gt;&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token function-variable function&quot;&gt;componentDidMount&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;mapState &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;na&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;map-unselected&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;sa&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;map-unselected&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;af&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;map-unselected&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;//etc through all continents&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To make my code as clean as possible, after grouping elements into the areas that will need to be individually manipulated (ex continents), I used an svg optimization tool. I thought I would need path IDs so I instructed the tool not to remove them, but it turns out I haven‚Äôt needed them so they could have been removed. One option you might need to uncheck though, is for removal of unnecessary groupings‚Ää‚Äî‚Ääthe tool may see the groupings we just worked hard to create as unnecessary, and that is definitely not what we want!&lt;/p&gt;
&lt;p&gt;Now, getting into the nitty-gritty of it: The map component has the following features in the source code:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;React state declared in constructor(ES6) or getInitialState(ES5) and used to track ‚Äúclicked‚Äù state:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token function-variable function&quot;&gt;getInitialState&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token literal-property property&quot;&gt;clicked&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; ‚Äònone‚Äô&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Fire an event when clicked, denoting current clicked state:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token function-variable function&quot;&gt;componentDidUpdate&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;emitEvent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;token function-variable function&quot;&gt;emitEvent&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; clickedEvent &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;CustomEvent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;   ‚ÄòWorldMapClicked‚Äô&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;   &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token literal-property property&quot;&gt;detail&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token literal-property property&quot;&gt;clickedState&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;clicked&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;dispatchEvent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;clickedEvent&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The event is dispatched on componentDidUpdate, which guarantees that it is receiving the new state. Firing an event allows users of the npm module to easily track what is happening (again, I think this might be hacky).&lt;/p&gt;
&lt;p&gt;There are two functions which handle the state and classNames‚Ää‚Äî‚Ääthe first determines what to set &lt;code&gt;this.state.clicked&lt;/code&gt; to by using some if/else statements and comparing the area clicked to the previous state, and the second manages classNames for css purposes by resetting all to the default, unselected, then if necessary, changing only the selected area to have a className reflecting that.&lt;/p&gt;
&lt;p&gt;It is important to note that the states should be suitable class names, such as ‚Äúmap-selected‚Äù and ‚Äúmap-unselected‚Äù, as they are assigned as className attributes to the groups in the svg! These classNames can then be referenced through CSS to change the appearance.&lt;/p&gt;
&lt;p&gt;Tune in next week for some choice words on making a React component available as an npm module and through a CDN.&lt;/p&gt;
&lt;p&gt;And that‚Äôs it! That‚Äôs all there is to using SVG to its full clickable, CSS-able potential. Don‚Äôt forget to &lt;a href=&quot;https://github.com/heatherbooker/clickable-svg-map&quot;&gt;check out the project on github&lt;/a&gt; if you need any clarification, or would like to use it yourself! Happy map-making!&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: This post was migrated from its &lt;a href=&quot;https://medium.com/@heatherbooker/how-to-make-an-interactive-map-in-react-f4e6e074b500#.entvl9iu5&quot;&gt;original home on Medium&lt;/a&gt; on February 23, 2017.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Vue.js vs React.js</title>
		<link href="https://hboo.ca/blog/posts/2016-06-15-vue-vs-react/"/>
		<updated>2016-06-15T00:00:00Z</updated>
		<id>https://hboo.ca/blog/posts/2016-06-15-vue-vs-react/</id>
		<content type="html">&lt;p&gt;Ooh, this is going to be a juicy one! I‚Äôm sure many people are fierce supporters of one of these technologies and zealous bashers of the other. Both Vue.js and React.js are both pretty new to the scene‚Ää‚Äî‚Äälet‚Äôs get some background information to begin. I‚Äôll go in reverse alphabetical order to avoid offending anyone right out of the gates. üòâ&lt;/p&gt;
&lt;p&gt;First of all, Vue and React are very similar. They are both libraries intended to be used to make composable ‚Äúviews‚Äù(Vue‚Äôs words) or ‚Äúuser interfaces‚Äù(React‚Äôs words), with reactive data binding. Composable, in this case, meaning based on the separation of view concerns into units described as ‚Äúcomponents‚Äù. In terms of data, both recommend a uni-directional flow of data.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://vuejs.org/&quot;&gt;Vue.js&lt;/a&gt; was created and maintained by Evan You and released publicly in early 2014. It positions itself as a simpler, more straightforward implementation of the component-based data-binding view concept.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://facebook.github.io/react/&quot;&gt;React.js&lt;/a&gt; was released a year earlier, after being created by Jordan Walke for use at Facebook. Frankly, until I began researching for this article, I had no idea there was a single person behind it‚Ää‚Äî‚ÄäFacebook definitely gets the acclaim for React.&lt;/p&gt;
&lt;p&gt;Vue is arguably the underdog at the moment. React absolutely took the javascript world by storm‚Ää‚Äî‚Ääit is currently the 6th most starred project ever on Github, and you would be hard pressed to be a front-end developer currently and not have heard anything about it. Vue even directly likens itself to React in its ‚Äú&lt;a href=&quot;http://blog.evanyou.me/2015/10/25/vuejs-re-introduction/&quot;&gt;(re)introduction‚Äù article&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;When it comes to structuring complex interfaces, Vue takes an approach that is very similar to React: it‚Äôs components all the way down.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The uni-directional data flow is an idea originally referred to by React as ‚ÄúFlux‚Äù. In this idea, data changes flow through a central container of state before they are sent back out to wherever the data may be needed. They each have their own personalized versions of Flux‚Ää‚Äî‚Ääthe most popular for React is Redux*, written by Dan Abramov. Since its inception, Redux has been widely praised by the community as well as the React team at Facebook themselves. Redux is also compatible with Vue, though Vuex is an architecture similarly based on Flux while being more specifically tailored to Vue.&lt;/p&gt;
&lt;p&gt;Alright. Now that all that factual stuff is out of the way, lets talk about our feelings. My first foray into React was decidedly painful. I had never used such an architecture before, and many people agree with me on the following point: the documentation is not beginner friendly. In this excellent article &lt;a href=&quot;http://blog.andrewray.me/reactjs-for-stupid-people/&quot;&gt;ReactJS for Stupid People&lt;/a&gt;, Andrew Ray points out React‚Äôs bewilderingly full and disorganized sidebar with multiple, competing entry points. React‚Äôs use of JSX, which looks like HTML tags written in the middle of a JS file, makes things hard enough, without additions such as‚Ää‚Äî‚Ääa mix of ES6 syntax and ‚Äúsafe‚Äù JS throughout React‚Äôs documentation and the hoardes of other tutorials found throughout the interwebs, superfluous yet pervasive use of webpack(which also has notoriously poor documentation), and the whole flux/redux/state/props mess(at least in my brain it was a mess). All in all, I think three things are the root of my lesser valuation of React:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A ton of nearly inextricable tools (webpack, babel, jsx, redux/reflux/alt..)&lt;/li&gt;
&lt;li&gt;Unnecessary complication, in my opinion, compared to Vue&lt;/li&gt;
&lt;li&gt;Confusing documentation&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;These three aforementioned items are surely related. However, I feel that Vue scores significantly higher than React on all three. I barely needed to venture away from the official Vue docs to get started using it; even when I did turn to Google, I frequently ended up back in the official docs to find my answer! To me, this is a major win‚Ää‚Äî‚Ääto have a technology clear enough that it can be sufficiently explained in one go, and to sufficiently and clearly do so. I expect that the Vue docs were written by the creator of Vue, which would afford the absolute clarity that accompanies such a position.&lt;/p&gt;
&lt;p&gt;I must end by saying that I enjoy using both‚Ää‚Äî‚ÄäI appreciate React‚Äôs current far-reach, as well as Vue‚Äôs dedication to simplicity. But I can‚Äôt help but lean towards team Vue. In any case, long live component based UIs!&lt;/p&gt;
&lt;p&gt;*Redux is technically not flux. But it was heavily inspired by it.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: This post was migrated from its &lt;a href=&quot;https://medium.com/@heatherbooker/vue-js-vs-react-js-28caa8f9b033#.ojssrqrl3&quot;&gt;original home on Medium&lt;/a&gt; on February 23, 2017.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Getting started with React and Webpack</title>
		<link href="https://hboo.ca/blog/posts/2016-06-09-getting-started-react-webpack/"/>
		<updated>2016-06-09T00:00:00Z</updated>
		<id>https://hboo.ca/blog/posts/2016-06-09-getting-started-react-webpack/</id>
		<content type="html">&lt;p&gt;I &lt;a href=&quot;https://hboo.ca/blog/posts/2016-05-28-if-gulp-were-a-person&quot;&gt;recently wrote about&lt;/a&gt; the wonders of gulp. Ironically, as soon as it was published, I ditched gulp for webpack. Actually that‚Äôs not quite true‚Ää‚Äî‚ÄäI first tried to incorporate browserify into gulp. I knew I needed some sort of packaging system in order to use JSX and React, and of these two most popular, browserify and webpack, webpack was touted to be a real mind-bender to set up. Everywhere I looked suggested that people who weren‚Äôt terribly experienced with other module-requiring systems like CommonJS should probably use browserify. So I got to work setting it up, only to realize that webpack would pay off in the long run.&lt;/p&gt;
&lt;p&gt;Scratch browserify. Move on to webpack. The internet was right‚Ää‚Äî‚Ääit was a pain to set up. Let‚Äôs dig right in and see if we can‚Äôt set up our own project right now using React and Webpack. (If you can‚Äôt be bothered to follow along, feel free to git clone my &lt;a href=&quot;https://github.com/heatherbooker/webpack-react-starter&quot;&gt;Webpack-React starter&lt;/a&gt;‚Ää‚Äî‚Ääa complete environment to use React and Webpack, as well as SCSS.)&lt;/p&gt;
&lt;p&gt;We will be creating a project ‚ÄòanyProject‚Äô in a directory ‚Äòdev‚Äô. Feel free to adapt these to your needs.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;mkdir&lt;/span&gt; dev/anyProject&lt;br /&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;cd&lt;/span&gt; dev/anyProject&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;npm is a dandy package manager we will be using to set up webpack and react. Make sure you have npm installed by typing &lt;code&gt;npm -v&lt;/code&gt;‚Ää‚Äî‚Äächeck &lt;a href=&quot;https://docs.npmjs.com/getting-started/installing-node&quot;&gt;here&lt;/a&gt; or &lt;a href=&quot;http://blog.npmjs.org/post/85484771375/how-to-install-npm&quot;&gt;here&lt;/a&gt; for details.&lt;/p&gt;
&lt;p&gt;Run &lt;code&gt;npm init -y&lt;/code&gt; to get started‚Ää‚Äî‚Ääthis will initialize your project with a package.json file. The -y option tells npm to use default settings; if you forget to use it, just press enter until you have gone through all of the questions. Running npm init -f accomplishes the same, but it also warns you:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://hboo.ca/blog/img/npm-warn.png&quot; alt=&quot;npm being a know-it-all&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Alarming! Better stick to -y which gets the job done without sassing you. (not the css type‚Ä¶)&lt;/p&gt;
&lt;p&gt;Next, we install webpack:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; i webpack -S&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This should have initialized a node_modules folder in your current directory (dev/anyProject, in this example). If not, webpack may have been downloaded to a node_modules folder found higher up in your directory tree. Webpack should now also be listed in the ‚Äòdependencies‚Äô section of your package.json. Let‚Äôs create a configuration file for webpack now, to tell it how to handle our files and what we want it do.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;touch&lt;/span&gt; webpack.config.js&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Open webpack.config.js, and type the following:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exports &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; ‚Äú&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;src&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;index&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;jsx‚Äù&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; ‚Äòbuild‚Äô&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; ‚Äúindex&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;js‚Äù&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This sets the first file webpack looks at as ‚Äòindex.jsx‚Äô located in directory ‚Äòsrc‚Äô, and writes the output to a file ‚Äòindex.js‚Äô located in dir ‚Äòbuild‚Äô. But how does our JSX become plain ol JS? Webpack uses ‚Äòloaders‚Äô to essentially translate code; we need to add loaders for whatever functionality we desire. First npm install some loaders: Babel will help the transition from JSX to js:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; i babel-loader babel-preset-es2015 babel-preset-react -S&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then go back to the webpack.config.js, and at the same level as ‚Äòentry‚Äô and ‚Äòoutput‚Äô, add a key ‚Äòmodule‚Äô which will contain configuration information for our loaders, starting with babel:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;  &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;loaders&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token literal-property property&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;\.jsx$&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token literal-property property&quot;&gt;exclude&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;node_modules&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token literal-property property&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; ‚Äòbabel‚Äô&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token literal-property property&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token literal-property property&quot;&gt;presets&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;‚Äòes2015‚Äô&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; ‚Äòreact‚Äô&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But where are our heads?! (not the git type‚Ä¶) We don‚Äôt even have React in our project yet! Better fix that. Run:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; i react react-dom -S&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let‚Äôs check that everything we‚Äôve done so far is working. We will need directories ‚Äòsrc‚Äô and ‚Äòbuild‚Äô, an index.jsx file and an index.html file.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;mkdir&lt;/span&gt; src build&lt;br /&gt;&lt;span class=&quot;token function&quot;&gt;touch&lt;/span&gt; src/index.jsx&lt;br /&gt;&lt;span class=&quot;token function&quot;&gt;touch&lt;/span&gt; src/index.html&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Hopefully you are using an editor like Sublime which will auto-generate a basic HTML doc by typing ‚Äòhtml‚Äô and pressing tab. Then throw in a quick &lt;/p&gt;&lt;div&gt; with an id=‚Äúapp‚Äù, and a script tag so the index.html looks like this:&lt;p&gt;&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token doctype&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;!&lt;/span&gt;&lt;span class=&quot;token doctype-tag&quot;&gt;DOCTYPE&lt;/span&gt; &lt;span class=&quot;token name&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;html&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;head&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;title&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;title&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;head&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;body&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;‚Äùapp‚Äù&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;text/javascript&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;index.js&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token script&quot;&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;body&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;html&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next we‚Äôll create a quick component in index.jsx using React. Start by requiring in react and react-dom, then create a class and render a component:&lt;/p&gt;
&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; React &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;‚Äòreact‚Äô&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; ReactDOM &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;‚Äòreact&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;dom‚Äô&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; AComponent &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createClass&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function-variable function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;HELLO WORLD!&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;ReactDOM&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;AComponent&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;‚Äòapp‚Äô&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(PS‚Ää‚Äî‚Ääyou may want to install a plugin for your text editor that you can set to parse JSX files (ex, Babel).)&lt;br /&gt;
For now, we will need to manually copy our index.html into the build directory:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;cp&lt;/span&gt; src/index.html build&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now all we have to do is run webpack! We will put a command into our package.json in the ‚Äòscripts‚Äô, so that npm can help us run webpack (the ‚Äòtest‚Äô script should have been auto-generated with the package.json file):&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token string-property property&quot;&gt;&quot;scripts&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;token string-property property&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;echo \&quot;Error: no test specified\&quot; &amp;amp;&amp;amp; exit 1&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;token string-property property&quot;&gt;&quot;build&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;webpack&quot;&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now in your terminal/command line just type:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; run build&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And open dev/anyProject/build/index.html in your browser and you should see this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://hboo.ca/blog/img/hello-world.png&quot; alt=&quot;&#39;Hello world&#39; in top left corner of your page&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Awesome! It works! You have successfully set up a project with webpack and react! But you might be thinking : we copied that index.html file manually, that was stupid. You‚Äôre right! Let‚Äôs prepare this project a little more for the real world. We want to handle html files, and we might as well also use webpack for one of its great skills‚Ää‚Äî‚Äärequiring in all sorts of tidbits, such as images. I like using SVGs as they are highly editable, and resize well.&lt;/p&gt;
&lt;p&gt;Start by installing html-webpack-plugin and file-loader:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; i html-webpack-plugin file-loader -D&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As their names suggest, the former is a plugin while the latter is a loader. To use the plugin, we require it at the top of the webpack.config.js:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; HtmlWebpackPlugin &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;‚Äòhtml&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;webpack&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;plugin‚Äô&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then after the loaders, we add a new section called plugins to the module.exports, and reference the HtmlWebpackPlugin var we just created. I like to instruct it to use a template, so that in the template I can have the one &lt;/p&gt;&lt;div id=&quot;‚Äúapp‚Äù&quot;&gt; for React to inject content into:&lt;p&gt;&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;plugins&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;HtmlWebpackPlugin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token literal-property property&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; ‚Äò&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;src&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;index&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;html‚Äô&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Scroll down to see how to set up the file loader (along with a SCSS loader).&lt;/p&gt;
&lt;p&gt;Now two last things: I like to be able to use SCSS , so we will set up a loader for that, and we can also set up React HMR for to serve our webpage and update it every time we make a change to a file. This is an excellent time-saver for development!&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; i babel-preset-react-hmre sass-loader node-sass css-loader style-loader -D&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To set up the file loader for images and the SCSS loader, add the following to the ‚Äòloaders‚Äô array in the webpack.config.js:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;\.scss$&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;loaders&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;‚Äústyle‚Äù&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; ‚Äúcss‚Äù&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; ‚Äúsass‚Äù&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;\.svg$&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; ‚Äòfile‚Äô&lt;br /&gt;   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And finally, setting up hot module reloading is very easy. Simply add ‚Äòreact-hmre‚Äô to the presets array in the babel loader:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token literal-property property&quot;&gt;presets&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;‚Äòes2015‚Äô&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; ‚Äòreact‚Äô&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; ‚Äòreact&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;hmre‚Äô&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then in package.json, add a new script which can be run with ‚Äònpm start‚Äô:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token string-property property&quot;&gt;&quot;start&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;webpack-dev-server --progress --inline --hot&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once you run ‚Äònpm start‚Äô, you can open localhost:8080 to see your app change as you develop it. Voila, that‚Äôs it! Now you can write SCSS and JSX and use React to create awesome apps. Get to it!&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: This post was migrated from its &lt;a href=&quot;https://medium.com/@heatherbooker/vue-js-vs-react-js-28caa8f9b033#.ojssrqrl3&quot;&gt;original home on Medium&lt;/a&gt; on February 23, 2017.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</content>
	</entry>
	
	<entry>
		<title>Prototyping a web app on Linux</title>
		<link href="https://hboo.ca/blog/posts/2016-05-30-prototyping-web-on-linux/"/>
		<updated>2016-05-30T00:00:00Z</updated>
		<id>https://hboo.ca/blog/posts/2016-05-30-prototyping-web-on-linux/</id>
		<content type="html">&lt;p&gt;I take great pride and pleasure in using an operating system sometimes thought of as difficult, risky, and geared towards programmers. Being the extremely novice developer that I am, I like to boost my sense of competence by using this somewhat elite OS so that I can bask in the surprise of others when they find out that I am using neither Windows nor MAC.&lt;/p&gt;
&lt;p&gt;However, along with the perks of using an a slightly atypical OS come its inevitable, intrinsically linked downfalls: in this case, namely a lack of support for and access to popular proprietary programs. Luckily, the open-source community is beautiful and prolific, its efforts affording the ability to hack together a solution to nearly any problem you should wish to tackle.&lt;/p&gt;
&lt;p&gt;My latest endeavour, prototyping my next project, has been no exception. The objective: create a high-fidelity, really pretty, visually-identical, interactive approximation of what I envision my web app looking like and being able to do. I began by trying out some web apps advertised for prototyping, InVision and Marvel App‚Ää‚Äî‚Ääwhich, of course, are indifferent to my OS‚Ää‚Äî‚ÄäI was off to a good start. InVision didn‚Äôt work out, but Marvel App was promising, allowing you create designs with its &lt;a href=&quot;http://blog.marvelapp.com/introducing-canvas-design-wireframe-and-animate-directly-in-marvel/&quot;&gt;canvas function&lt;/a&gt;. However, there was a glaring flaw: once you move on from creating screen1 to screen2, screen3 &lt;em&gt;must&lt;/em&gt; be based off screen2‚Ää‚Äî‚Ääthere‚Äôs no way to use screen1 as a starting point. This becomes extremely frustrating extremely quickly, and I was getting really tempted to cut corners and just omit entire interactions and features.&lt;/p&gt;
&lt;p&gt;So, I migrated my project over to some OS-based image editing software. (Note: I am a complete noob at image manipulations.) I had previously used GIMP, but gave InkScape a run this time. Abode Illustrator seems to typically be the tool of choice for operations like mine, but it is of course unavailable for Linux. Having never used Illustrator, I expect that I experienced exactly the same amount of difficulty getting started with InkScape as I would have with Illustrator. As with many things on the most user-friendly Linux distros (ie Ubuntu based), there is a wealth of online knowledge in the form of question forums and tutorials. This meant that I could just google any problem I ran into for instant assistance. I reckon Illustrator similarly has plenty of how-to information available on the interwebz.&lt;/p&gt;
&lt;p&gt;By taking advantage of all the help available, I was able to get a handle on using InkScape to mock-up some beautiful screens. I then uploaded each of them back into Marvel App and used Marvel to add interactions between them. And you know what? I don‚Äôt think prototying in Linux was particularly hardship-prone.&lt;/p&gt;
&lt;p&gt;There was one important lesson learned, that I must remind myself of:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If it‚Äôs not simple, just google it!&lt;br /&gt;
Usually I am too stubborn‚Ää‚Äî‚ÄäI try until I‚Äôm mad and then declare it impossible. ‚ÄúJust google it‚Äù is a much better tactic.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All said and done, I feel much more confident about mocking-up and prototyping apps for future projects after this experience and I‚Äôm not at all concerned that my OS is impeding my pace. Another point for Linux!&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: This post was migrated from its &lt;a href=&quot;https://medium.com/@heatherbooker/prototyping-a-web-app-on-linux-a2834e9a4c55#.o2b92lp0v&quot;&gt;original home on Medium&lt;/a&gt; on February 23, 2017.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>If GULP were a person‚Ä¶</title>
		<link href="https://hboo.ca/blog/posts/2016-05-28-if-gulp-were-a-person/"/>
		<updated>2016-05-28T00:00:00Z</updated>
		<id>https://hboo.ca/blog/posts/2016-05-28-if-gulp-were-a-person/</id>
		<content type="html">&lt;p&gt;Ze* would be pretty amazing. I don‚Äôt know zir* very well yet, but ze* sure seems to have a lot of people who like zir. Granted, there are also a fair few who are not afraid to speak out against gulp‚Ää‚Äî‚Ääbut that‚Äôs hardly unusual when someone wonderful shows up on the scene.&lt;/p&gt;
&lt;p&gt;Gulp was a little hard to follow at first. Ze uses all this language that, like everyone in the field, is a little perplexing until you‚Äôre used to it. I suppose you would call that &lt;em&gt;jargon&lt;/em&gt;. Zir four main capabilities are expressed as &lt;code&gt;.task&lt;/code&gt;, &lt;code&gt;.pipe&lt;/code&gt;, &lt;code&gt;.src&lt;/code&gt;, and &lt;code&gt;.dest&lt;/code&gt;. The latter two are simply used to denote the source and destination of the files you would like gulp to operate on. &lt;code&gt;.task&lt;/code&gt; is, of course, a description of the task you would like gulp to execute. Now, &lt;code&gt;.pipe&lt;/code&gt; is, to my untrained eyes, the most wonderful and curious constituent of gulp. Ze isn‚Äôt showy about it, but once you understand it, it is the backbone of all the incredible functionality gulp so humbly offers. You see, the aptly named &lt;code&gt;.pipe&lt;/code&gt; function takes a reference to a plugin you would like to see used on your code, and then pipes your code through that plugin from &lt;code&gt;.src&lt;/code&gt; to &lt;code&gt;.dest&lt;/code&gt;, leaving a new, neatly wrapped, perfectly articulated version of your code in wherever you have designated as the destination. The most beautiful thing about gulp, in my view, is the conceptualization afforded by the use of this code that represents sending code through a pipeline where it undergoes various transformations.&lt;/p&gt;
&lt;p&gt;If there‚Äôs one thing I know for sure, it‚Äôs that gulp loves to accessorize. In fact, ze wouldn‚Äôt be that notable at all without all zir little friends. Gulp gets along with pug (formerly jade) for html, sass for css, mocha for testing, and basically anyone or anything else you‚Äôd like zir to. Ze can help you uglify your code for running, while leaving your original code untouched so when you come back to edit it/check it out, you aren‚Äôt bewildered by the wall of text that is uglified code. Ze can also lint your code, simplify the use of frameworks like react.js and express, compile coffeescript, and do a million other handy things that just makes zir a great companion.&lt;/p&gt;
&lt;p&gt;Now, don‚Äôt get me wrong‚Ää‚Äî‚Ääthere are probably other gizmos and gadgets that accomplish the same things in various permutations and combinations. But gulp can just do so MUCH! By golly, just in researching this article I discovered that ze can work with git for version control! Unbelievable! I tell ya folks, whatever you want to, you talk to gulp and the two of you will work something out to your satisfaction. With all zir connections, you won‚Äôt be disappointed.&lt;/p&gt;
&lt;p&gt;*Note on ‚Äúze‚Äù, ‚Äúzir‚Äù &amp;amp; ‚Äúzirs‚Äù: these are commonly used gender-neutral pronouns, intended to lack any connotation of gender. I do not wish to assign a gender to Gulp, and thus I have selected these non-specific pronouns. For more information, feel free to check out this &lt;a href=&quot;https://hboo.ca/blog/posts/2016-05-28-if-gulp-were-a-person/%5Cgenderneutralpronoun.wordpress.com&quot;&gt;explanation&lt;/a&gt; from the Gender Neutral Pronoun Blog.&lt;/p&gt;
&lt;p&gt;**Thanks to Dylan Harness for motivating this post.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: This post was migrated from its &lt;a href=&quot;https://medium.com/@heatherbooker/if-gulp-were-a-person-82a6cd6e3e38#.fhs0i3owm&quot;&gt;original home on Medium&lt;/a&gt; on February 23, 2017.&lt;/p&gt;
</content>
	</entry>
</feed>
